{"version":3,"sources":["Aeql/Grammar.ts","Aeql/util/capitalism.ts","App/Components/EntityTable.tsx","App/Components/AeqlQueryView.tsx","Aeql/Query.ts","Aeql/Semantics.ts","App/Services/Database.ts","Aeql/Aeql.ts","App/Components/HowTo.tsx","App/Components/AeqlQueryManager.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["grammar","capitalism","s","charAt","toUpperCase","slice","EntityTable","props","models","length","react_default","a","createElement","className","collectionName","Object","entries","map","_ref","_ref2","slicedToArray","attr","key","model","id","Fragment","_ref3","_ref4","value","AeqlQueryView","_React$Component","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","textarea","intervalID","lastValue","polling","React","createRef","inherits","createClass","_this2","window","setInterval","current","val","parseAeql","clearInterval","resultData","ref","defaultValue","initialQuery","result","errors","style","textAlign","whiteSpace","split","error","EntityTable_EntityTable","Component","isNode","contents","require","readFileSync","ohm","grammarFromScriptElement","g","Identifier","IntegerLiteral","toString","Subject","name","projections","arguments","undefined","nameValue","projectValues","project","describe","join","concat","getValue","Condition","attributeName","attributeExpr","Ordering","HttpVehicle","url","Via","vehicle","Query","subject","order","conditions","via","console","log","condition","ordering","tree","_find","entity","elements","entityTree","queryElementsTree","orderTree","viaTree","conditionsTree","Array","forEach","element","Error","Entity_simple","Entity_projection","_of","projects","proj","Criteria","_where","Conditions","attribute","is","Order","_by","_via","Vehicle","_slash","URL","elems","sourceString","EmptyListOf","emptyListOf","NonemptyListOf","eFirst","_sep","eRest","toConsumableArray","nonemptyListOf","number_whole","digits","Number","ident","fst","rst","semantics","createSemantics","addOperation","aeql","Aeql","config","personae","data","inputString","match","succeeded","message","_evaluate","asyncToGenerator","regenerator_default","mark","_callee","q","wrap","_context","prev","next","processSimpleQueryManually","sent","abrupt","stop","_x","apply","_resolve","_callee2","_context2","evaluate","interpret","_x2","_processSimpleQueryManually","_callee3","collection","orderName","_context3","getName","axios","get","getUrl","baseURL","sort","b","getAttributeName","filter","it","matches","isProjected","projection","getProjects","_x3","_x4","Human","age","Employee","empId","salary","department","Humans","Employees","HowTo","backgroundColor","AeqlQueryManager","_Component","_getPrototypeOf2","_len","args","_key","state","query","userInput","setState","t0","HowTo_HowTo","AeqlQueryView_AeqlQueryView","_ref5","persona","_ref6","_ref7","attrName","type","AeqlText","color","textShadow","fontSize","fontWeight","App","App_AeqlText","AeqlQueryManager_AeqlQueryManager","Boolean","location","hostname","ReactDOM","render","src_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b13dd42c.chunk.js","sourcesContent":["import ohm, { Grammar } from 'ohm-js';\r\nimport isNode from 'detect-node';\r\n\r\nlet grammar;\r\nif (isNode) {\r\n  var fs = require('fs');\r\n  var contents = fs.readFileSync('./src/Aeql/Aeql.ohm');\r\n  grammar = ohm.grammar(contents);\r\n} else {\r\n  grammar = ohm.grammarFromScriptElement();\r\n}\r\nlet g: Grammar = grammar;\r\n\r\nexport default g;","const capitalize: (s: string) => string = (s: string) =>\r\n    s.charAt(0).toUpperCase() + s.slice(1)\r\n\r\nexport default {\r\n    capitalize\r\n}","import React from 'react';\r\nimport capitalism from \"../../Aeql/util/capitalism\";\r\nimport { Entity } from \"../../Aeql/Aeql\";\r\nimport './EntityTable.scss';\r\n\r\nexport const EntityTable: React.FC<{ collectionName?: string, models: Entity[] }> = (props) => {\r\n  let { models } = props;\r\n  if (!models.length) {\r\n    return <p>Nothing.</p>\r\n  }\r\n  return <section className='EntityTable'> \r\n    <h3>{props.collectionName}</h3>\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          {Object.entries(models[0]).map(([attr, val]) => <th key={attr}>\r\n            {capitalism.capitalize(attr)}\r\n          </th>)}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {models.map(model => <tr key={model.id}><>\r\n          {Object.entries(model).map(\r\n            ([attr, value]) => <td key={attr}>\r\n              {!(value instanceof Object) ? value : \"[object]\"}\r\n            </td>\r\n          )}\r\n        </>\r\n        </tr>)}\r\n      </tbody>\r\n    </table>\r\n  </section>\r\n}","import React from 'react';\r\nimport { EntityTable } from './EntityTable';\r\nimport { Entity } from '../../Aeql/Aeql';\r\n\r\nexport interface QueryViewProps {\r\n  initialQuery?: string;\r\n errors: string,\r\n resultData: Entity[],\r\n parseAeql: Function\r\n result: string;\r\n}\r\n\r\n\r\nexport class AeqlQueryView extends React.Component<QueryViewProps> {\r\n  textarea: React.RefObject<any>;\r\n  intervalID: number = 0;\r\n  lastValue: string = 'nothing';\r\n  polling: boolean = false;\r\n  constructor(props: QueryViewProps) {\r\n    super(props);\r\n    this.textarea = React.createRef();\r\n  }\r\n  componentDidMount() {\r\n      this.intervalID = window.setInterval(() => {\r\n        if (this.lastValue && this.lastValue != this.textarea.current.value && !this.polling) {\r\n          let val = this.textarea.current.value;\r\n          this.props.parseAeql(val);\r\n          this.lastValue = val;\r\n        }\r\n      }, 150);\r\n  }\r\n  componentWillUnmount() {\r\n      clearInterval(this.intervalID);\r\n  }\r\n  public render() {\r\n    let { resultData } = this.props;\r\n    return <div className='AeqlQuery'>\r\n      <label>\r\n      <textarea id='query' ref={this.textarea} defaultValue={this.props.initialQuery || 'find humans'} />\r\n      </label>\r\n      <section className='Result'>\r\n        <h3>{this.props.result}</h3>\r\n        {this.props.errors && \r\n          <div style={{ textAlign: 'justify', whiteSpace: 'pre-wrap' }}>\r\n            {this.props.errors.split(\"\\n\").map(error => <p key={error}><code>{error}</code></p>)}\r\n          </div> ||\r\n\r\n        resultData instanceof Object && <EntityTable models={resultData} />}\r\n      </section>\r\n    </div>;\r\n  }\r\n}\r\n","import { Node } from 'ohm-js';\r\n\r\nexport interface QueryElement {\r\n    describe(): string\r\n}\r\n\r\nexport class Identifier implements QueryElement {\r\n    constructor(private value: string) {}\r\n    describe() {\r\n        return this.value;\r\n    }\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n}\r\n\r\nexport class IntegerLiteral implements QueryElement {\r\n    constructor(private value: number) {}\r\n    describe() { return this.value.toString(); }\r\n    getValue() { return this.value; }\r\n}\r\n\r\nexport class Subject implements QueryElement {\r\n    static of(nameValue: string) {\r\n        return new Subject(\r\n            new Identifier(nameValue)\r\n        );\r\n    }\r\n\r\n    static project(nameValue: string, projectValues: string[]) {\r\n        return new Subject(\r\n            new Identifier(nameValue),\r\n            projectValues.map(project => new Identifier(project)),\r\n        )\r\n    }\r\n\r\n    constructor(\r\n        private name: Identifier,\r\n        private projections: Identifier[] = []\r\n    ) { }\r\n\r\n    isProjected() {\r\n        return !!this.projections.length;\r\n    }\r\n\r\n    describe() {\r\n        if (this.projections.length) {\r\n            return this.projections.map(project => project.describe()).join(\", \")\r\n                + ` of ${this.name.describe()}`;\r\n\r\n        } else {\r\n            return this.name.describe();\r\n        }\r\n    }\r\n\r\n    getName() { \r\n        return this.name.getValue();\r\n    }\r\n\r\n    getProjects() {\r\n        return this.projections;\r\n    }\r\n}\r\n\r\nexport class Condition implements QueryElement {\r\n    getAttributeName() {\r\n        return this.attributeName.getValue();\r\n    }\r\n    getValue() {\r\n        return this.attributeExpr.getValue();\r\n    }\r\n    constructor(private attributeName: Identifier, private attributeExpr: any) {\r\n    }\r\n\r\n    describe() {\r\n        return `${this.attributeName.describe()} is ${this.attributeExpr.describe()}`\r\n    }\r\n}\r\n\r\nexport class Ordering implements QueryElement {\r\n    constructor(private name: Identifier) {}\r\n    describe() {\r\n        return `${this.name.describe()}`\r\n    }\r\n    getName() {\r\n        return this.name.getValue();\r\n    }\r\n}\r\n\r\nexport class HttpVehicle {\r\n    constructor(public url: string) {}\r\n\r\n}\r\n\r\nexport class Via implements QueryElement {\r\n    constructor(private vehicle: HttpVehicle) {} \r\n    describe() {\r\n        return `${this.vehicle.url}`\r\n    }\r\n\r\n    getUrl(): any {\r\n        return this.vehicle.url\r\n    }\r\n}\r\n\r\nexport class Query {\r\n    constructor(\r\n        public subject: Subject,\r\n        public order?: Ordering,\r\n        public conditions?: Condition[],\r\n        public via?: Via\r\n    ) {}\r\n\r\n    describe() {\r\n        console.log(\"conditions\", this.conditions)\r\n        let conditions = '';\r\n        if (this.conditions && this.conditions.length) {\r\n            conditions = `where ${this.conditions.map(condition => condition.describe())}`;\r\n        } \r\n        let ordering = '';\r\n        if (this.order) {\r\n            ordering = `by ${this.order.describe()}`\r\n        }\r\n        let via = '';\r\n        if (this.via) {\r\n            via = `via ${this.via.describe()}`\r\n        }\r\n        return `Find ${this.subject.describe()} ${ordering} ${conditions} ${via}`;\r\n    }\r\n}\r\n","import grammar from './Grammar';\r\nimport { Query, Subject, Condition, Ordering, Identifier as Identifier, Via, HttpVehicle, IntegerLiteral } from './Query';\r\nimport { Node } from 'ohm-js';\r\n\r\nconst tree = {\r\n  Query: (_find: Node, entity: Node, elements: Node) => {\r\n    let entityTree = entity.tree()\r\n    let queryElementsTree = elements.tree()\r\n    let orderTree: Ordering | undefined = undefined;\r\n    let viaTree: Via | undefined = undefined;\r\n    let conditionsTree: Condition[] = []\r\n    if (queryElementsTree instanceof Array) {\r\n      queryElementsTree.forEach(element => {\r\n        if (element instanceof Ordering) {\r\n          if (orderTree) { throw new Error(\"Can't have multiple orderings\") }\r\n          orderTree = element;\r\n        } else if (element instanceof Via) {\r\n          if (viaTree) { throw new Error(\"Can't have multiple vehicles (vias)\") }\r\n          viaTree = element;\r\n        } else if (element instanceof Array && element.length && \r\n            element[0] instanceof Condition) { \r\n          if (conditionsTree.length) { throw new Error(\"Can't have multiple conditions\") }\r\n              // presume all conditions?\r\n              conditionsTree = element;\r\n        }\r\n      })\r\n    }\r\n    let q = new Query(entityTree, orderTree, conditionsTree, viaTree)\r\n    return q\r\n  },\r\n\r\n  Entity_simple: (id: Node) => new Subject(id.tree()),\r\n  Entity_projection: (id: Node, _of: Node, projects: Node) => {\r\n    let proj = new Subject(\r\n      projects.tree(),\r\n      id.tree(),\r\n    )\r\n    console.log(\"PROJ\", proj)\r\n    return proj\r\n  },\r\n\r\n  Criteria: (_where: Node, conditions: Node) => conditions.tree(),\r\n\r\n  Conditions: (conditions: Node) => conditions.tree(),\r\n\r\n  Condition: (attribute: Node, is: Node, value: Node) =>\r\n    new Condition(attribute.tree(), value.tree()),\r\n  \r\n  Order: (_by: Node, order: Node) => {\r\n    let orderTree = order.tree()\r\n    let ordering = new Ordering(orderTree)\r\n    return ordering;\r\n  },\r\n\r\n  Via: (_via: Node, vehicle: Node) => {\r\n    let theVia = new Via(vehicle.tree());\r\n    return theVia;\r\n  },\r\n\r\n  Vehicle: (_slash: Node, url: Node) => {\r\n    let theVehicle: HttpVehicle = new HttpVehicle('/' + url.tree());\r\n    return theVehicle;\r\n  },\r\n\r\n  URL: (elems: Node) => {\r\n    return elems.sourceString\r\n  },\r\n\r\n  EmptyListOf: (): Node[] => [],\r\n  emptyListOf: (): Node[] => [],\r\n\r\n  NonemptyListOf: (eFirst: Node, _sep: any, eRest: Node) =>\r\n    [eFirst.tree(), ...eRest.tree()],\r\n\r\n  nonemptyListOf: (eFirst: Node, _sep: any, eRest: Node) =>\r\n    [eFirst.tree(), ...eRest.tree()],\r\n\r\n  number_whole: (digits: Node) =>\r\n    new IntegerLiteral(Number(digits.sourceString)),\r\n\r\n  ident: (fst: Node, rst: Node) =>\r\n    new Identifier(fst.sourceString + rst.sourceString),\r\n};\r\n\r\nconst semantics = grammar.createSemantics();\r\nsemantics.addOperation('tree', tree);\r\n\r\nexport default semantics;","import Aeql from \"../../Aeql\";\r\n\r\nexport let aeql = new Aeql({\r\n  personae: {\r\n    Human: {\r\n      name: 'string',\r\n      age: 'int',\r\n    },\r\n    Employee: {\r\n      name: 'string',\r\n      empId: 'int',\r\n      age: 'int',\r\n      salary: 'int',\r\n      department: 'Department',\r\n    }\r\n  },\r\n  data: {\r\n    Humans: [\r\n      { id: 1, name: 'Zeta',   age: 59 },\r\n      { id: 2, name: 'Bob',    age: 23 },\r\n      { id: 3, name: 'Jim',    age: 19 },\r\n      { id: 4, name: 'Abel',   age: 24 },\r\n      { id: 5, name: 'Sawyer', age: 34 },\r\n    ],\r\n    Employees: [\r\n      { id: 1, name: 'Rhonda', empId: 1002, age: 47, salary: 14000 },\r\n      { id: 2, name: 'Barbara-Anniston', empId: 1034, age: 23, salary: 18000 },\r\n      { id: 3, name: 'Carol Andrews', empId: 1045, age: 35, salary: 10000 },\r\n      { id: 4, name: 'Sandra Amberg', empId: 5044, age: 42, salary: 18500 },\r\n      { id: 5, name: 'Andra Saunders', empId: 231, age: 23, salary: 8000 },\r\n      { id: 6, name: 'Exandra Calabanza', empId: 1, age: 68, salary: 12000 },\r\n    ]\r\n  }\r\n});","import { Query, Condition } from \"./Query\";\r\nimport grammar from './Grammar';\r\nimport semantics from \"./Semantics\";\r\nimport capitalism from \"./util/capitalism\";\r\nimport axios from 'axios';\r\nimport { tsMappedType } from \"@babel/types\";\r\n\r\n\r\ntype AttributeType = 'Text' | 'Int' | string\r\nexport type Persona = { [attribute: string]: AttributeType }\r\nexport type Personae = { [model: string]: Persona }\r\n\r\nexport type Entity = { id: number, [attr: string]: any }\r\nexport type Data = {\r\n    [collectionName: string]: Entity[]\r\n}\r\ninterface AeqlConfig {\r\n    personae: Personae\r\n    data?: Data\r\n}\r\nexport class Aeql {\r\n\r\n    public personae: Personae\r\n    public data?: Data\r\n\r\n    constructor(public config: AeqlConfig) {\r\n        this.personae = config.personae;\r\n        if (config.data) {\r\n            this.data = config.data;\r\n        }\r\n    }\r\n\r\n    public interpret(inputString: string): Query {\r\n        let match = grammar.match(inputString);\r\n        if (match.succeeded()) {\r\n            let s = semantics(match);\r\n            return s.tree();\r\n        } else {\r\n            throw new Error(\"Could not parse input string: \" + match.message);\r\n        }\r\n    }\r\n\r\n    public async evaluate(q: Query): Promise<Entity[]> {\r\n        if (q.via || this.data) {\r\n            let result = await Aeql.processSimpleQueryManually(q, this.data || {})\r\n            return result;\r\n        } else {\r\n            throw new Error(\"No data provided!\")\r\n        }\r\n    }\r\n\r\n    public async resolve(inputString: string): Promise<Entity[]> {\r\n        return await this.evaluate(this.interpret(inputString));\r\n    }\r\n\r\n    private static async processSimpleQueryManually(q: Query, data: Data) {\r\n        console.log(\"PROCESS SIMPLE QUERY MANUALLY\", { q })\r\n        let collectionName: string = capitalism.capitalize(\r\n            q.subject.getName()\r\n        )\r\n        let collection: { id: number, [key: string]: any }[] = [];\r\n        if (q.via) {\r\n            let result = await axios.get(q.via.getUrl(), {\r\n                baseURL: 'https://jsonplaceholder.typicode.com'\r\n            })\r\n            collection = result.data\r\n        } else if (data[collectionName] && data[collectionName].length) {\r\n            collection = data[collectionName].slice();\r\n        }\r\n        if (q.order) {\r\n            let { order } = q\r\n            let orderName = order.getName()\r\n            collection = collection.sort((a, b) =>\r\n                a[orderName] > b[orderName] ? 1 : -1\r\n            )\r\n        }\r\n        if (q.conditions) {\r\n            let { conditions } = q\r\n            conditions.forEach((condition: Condition) => {\r\n                let attr = condition.getAttributeName()\r\n                let val = condition.getValue()\r\n                collection = collection.filter(it => {\r\n                    let matches = it[attr] == val\r\n                    console.log({ it, matches })\r\n                    return !!matches\r\n                })\r\n                console.log(\"APPLY CONDITION\", { condition, collection });\r\n            })\r\n        }\r\n        if (q.subject.isProjected()) {\r\n            collection = collection.map(it => {\r\n                let projection: { id: number, [ key: string ]: any } = {\r\n                    id: it.id\r\n                };\r\n                q.subject.getProjects().forEach(project => {\r\n                    let val: string = project.getValue();\r\n                    projection[val] = it[val];\r\n                })\r\n                console.log(\"PROJECTED\", { it, projection })\r\n                return projection;\r\n            })\r\n            // q.subject.getProjections()\r\n        }\r\n        return collection;\r\n    }\r\n}","import React from 'react';\r\nexport const HowTo: React.FC = () => <section className=\"Tips\" style={{ backgroundColor: '#e4eae9' }}>\r\n    <h3>how-to</h3>\r\n    <dl>\r\n        <dt>QUERY FORM</dt>\r\n        <dd>\r\n            the most basic form of a query begins\r\n            with <code>find</code> or <code>get</code>&nbsp;\r\n            followed by a model name\r\n          </dd>\r\n        <code>find humans</code>\r\n        <hr />\r\n        <dt>ORDERING</dt>\r\n        <dd>\r\n            you can order by attributes with <code>by</code>&nbsp;\r\n            followed by the attribute name\r\n          </dd>\r\n        <code>find employees by salary</code>\r\n        <hr />\r\n        <dt>SELECTION</dt>\r\n        <dd>pick rows using <code>with</code>, <code>where</code> or <code>whose</code> </dd>\r\n        <code>find humans whose age is 34</code>\r\n        <hr />\r\n        <dt>PROJECTION</dt>\r\n        <dd>pick columns using <code>find ... of</code></dd>\r\n        <code>find name, salary of employees where age is 47</code>\r\n        <hr/>\r\n        <dt>FETCHING</dt>\r\n        <dd>load data with <code>via /users</code></dd>\r\n        <code>find users whose name is Bret via /users</code>\r\n    </dl>\r\n</section> ","import React, { Component, TextareaHTMLAttributes } from 'react';\r\nimport { Query } from '../../Aeql/Query';\r\nimport { Entity } from '../../Aeql/Aeql';\r\nimport { EntityTable } from './EntityTable';\r\nimport { AeqlQueryView } from './AeqlQueryView';\r\nimport { aeql } from '../Services/Database';\r\nimport { HowTo } from './HowTo';\r\nexport type QueryState = {\r\n  query: string,\r\n  result: string,\r\n  errors: string,\r\n  resultData: Entity[]\r\n}\r\n\r\nexport class AeqlQueryManager extends Component<{}, QueryState> {\r\n  state = {\r\n    query: '',\r\n    errors: '',\r\n    result: '',\r\n    resultData: []\r\n  };\r\n\r\n  private parseAeql = async (message: string) => {\r\n    let userInput: string = message;\r\n    if (userInput === '') {\r\n      this.setState({ query: '', result: '' })\r\n    } else {\r\n      let result = '';\r\n      let errors = undefined;\r\n      let resultData: Entity[] = [];\r\n      try {\r\n        let q: Query = aeql.interpret(userInput);\r\n        result = q.describe() //`match: ${q.describe()}\\n`\r\n        resultData = await aeql.evaluate(q)\r\n      } catch (e) {\r\n        errors = e.message\r\n      }\r\n      this.setState({\r\n        query: userInput,\r\n        result,\r\n        errors,\r\n        resultData,\r\n      });\r\n    }\r\n  };\r\n\r\n  public render() {\r\n    return <div>\r\n      <h3>query playground</h3>\r\n      <section className=\"TipsAndQuery\">\r\n        <HowTo />\r\n\r\n        <AeqlQueryView\r\n          initialQuery='find humans by name'\r\n          errors={this.state.errors}\r\n          parseAeql={this.parseAeql}\r\n          result={this.state.result}\r\n          resultData={this.state.resultData}\r\n        >\r\n        </AeqlQueryView>\r\n      </section>\r\n      <hr/>\r\n      <h4>Playground Data</h4>\r\n      <section className='SchemaAndData'>\r\n        <section className='Data'>\r\n          {aeql.data && Object.entries(aeql.data).map(\r\n            ([collection, models]) => <EntityTable\r\n              key={collection}\r\n              collectionName={collection}\r\n              models={models}\r\n            />\r\n          )}\r\n        </section>\r\n        <section className='Schema'>\r\n          <b>SCHEMA</b>\r\n          {Object.entries(aeql.personae).map(([name, persona]) => <section className='persona' key={name}>\r\n            <h3>Persona {name}</h3>\r\n            <div>\r\n              {Object.entries(persona).map(([attrName, type]) => <div key={attrName}>\r\n                {attrName} ({type})\r\n                </div>)}</div>\r\n          </section>)}\r\n        </section>\r\n      </section>\r\n    </div>;\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport { AeqlQueryManager } from './Components/AeqlQueryManager';\n\nconst AeqlText = () =>  {\n  return (<span className='Aeql-name' style={{ color: '#aeeaea', textShadow: '1.2px 1.2px #aeaeae', fontSize: '135%', fontWeight: 'bolder' }}>\n    aeql\n  </span>);\n}\n\nconst App: React.FC = () => {\n  return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>aeql-lang</h1>\n        </header>\n        <div className=\"App-wrapper\">\n          <main className=\"App-main\">\n            <section className='Welcome Card' style={{ backgroundColor: '#fafaf3' }}>\n              <h1>let's learn all about <AeqlText />!</h1>\n              <ul>\n                <li>naturalism</li>\n                <li>human values</li>\n                <li>categoreal design</li>\n              </ul>\n              <code>find humans who are awesome</code>\n            </section>\n\n            <section className='QueryManager Card'>\n              <AeqlQueryManager />\n            </section>\n          </main>\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n// import Trianglify from 'trianglify';\n// var pattern = Trianglify({\n//     width: window.innerWidth,\n//     height: window.innerHeight\n// });\n// document.body.appendChild(pattern.canvas())\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}