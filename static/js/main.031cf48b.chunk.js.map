{"version":3,"sources":["Aeql/Grammar.ts","Aeql/Query.ts","Aeql/Semantics.ts","Aeql/util/capitalism.ts","Aeql/index.ts","Aeql/Aeql.ts","App/Components/EntityTable.tsx","App/Components/AeqlQueryManager.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["grammar","isNode","console","warn","contents","require","readFileSync","ohm","grammarFromScriptElement","g","Identifier","value","Object","classCallCheck","this","createClass","key","Subject","name","concat","describe","getValue","Ordering","Query","subject","order","conditions","log","length","map","condition","ordering","tree","_find","entity","elements","entityTree","queryElementsTree","orderTree","undefined","Array","forEach","element","Error","q","elementsTree","Entity","id","Order","_by","ident","fst","rst","sourceString","semantics","createSemantics","addOperation","capitalism","s","charAt","toUpperCase","slice","Aeql","config","personae","data","inputString","match","succeeded","message","processQuery","evaluate","interpret","collectionName","getName","collection","orderName","sort","a","b","EntityTable","props","models","react_default","createElement","className","entries","_ref","_ref2","slicedToArray","attr","model","Fragment","_ref3","_ref4","aeql","Human","age","Humans","AeqlQueryView","_this$props","query","parseAeql","resultData","style","backgroundColor","minWidth","minHeight","onChange","e","target","children","EntityTable_EntityTable","persona","attrName","type","React","Component","AeqlQueryManager","_Component","_getPrototypeOf2","_this","_len","arguments","args","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","result","userInput","setState","inherits","AeqlQueryManager_AeqlQueryView","_ref5","_ref6","AeqlText","color","textShadow","fontSize","fontWeight","App","App_AeqlText","AeqlQueryManager_AeqlQueryManager","Boolean","window","location","hostname","ReactDOM","render","src_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.031cf48b.chunk.js","sourcesContent":["import ohm, { Grammar } from 'ohm-js';\r\nimport isNode from 'detect-node';\r\n\r\nlet grammar;\r\nif (isNode) {\r\n  console.warn(\"Loading Aeql grammar from filesystem...\");\r\n  var fs = require('fs');\r\n  var contents = fs.readFileSync('./src/Aeql/Aeql.ohm');\r\n  grammar = ohm.grammar(contents);\r\n} else {\r\n  grammar = ohm.grammarFromScriptElement();\r\n}\r\nlet g: Grammar = grammar;\r\n\r\nexport default g;","export class Identifier {\r\n    constructor(private value: string) {}\r\n    describe() {\r\n        return this.value;\r\n    }\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n}\r\n\r\nexport class Subject {\r\n    constructor(private name: Identifier) {}\r\n    describe() {\r\n        return `${this.name.describe()}[subject]`;\r\n    }\r\n    getName() { \r\n        return this.name.getValue();\r\n    }\r\n}\r\n\r\nclass Condition {\r\n    describe() { return 'a condition' }\r\n}\r\n\r\nexport class Ordering {\r\n    constructor(private name: Identifier) {}\r\n    describe() {\r\n        return `${this.name.describe()}[order]`\r\n    }\r\n    getName() {\r\n        return this.name.getValue();\r\n    }\r\n}\r\n\r\nexport class Query {\r\n    constructor(public subject: Subject, public order?: Ordering, public conditions?: Condition[]) {\r\n        console.log(\"CONSTRUCT QUERY\",\r\n        {\r\n            subject,\r\n            order,\r\n            conditions,\r\n        })\r\n    }\r\n\r\n    describe() {\r\n        console.log(\"conditions\", this.conditions)\r\n        let conditions = '';\r\n        if (this.conditions && this.conditions.length) {\r\n            conditions = `where ${this.conditions.map(condition => condition.describe())}`;\r\n        } \r\n        let ordering = '';\r\n        if (this.order) {\r\n            ordering = `by ${this.order.describe()}`\r\n        }\r\n        return `Find ${this.subject.describe()} ${ordering} ${conditions}`;\r\n    }\r\n}\r\n","import grammar from './Grammar';\r\nimport { Query, Subject, Ordering, Identifier } from './Query';\r\nimport { Node } from 'ohm-js';\r\n\r\nconst tree = {\r\n  Query: (_find: Node, entity: Node, elements: Node) => {\r\n    let entityTree = entity.tree()\r\n    let queryElementsTree = elements.tree()\r\n    let orderTree: Ordering | undefined = undefined;\r\n    //   orderTree = queryElementsTree;\r\n    if (queryElementsTree instanceof Array) {\r\n      console.log(\"GOT A ARRAY HERE :(\")\r\n      // assume query order for now??\r\n      queryElementsTree.forEach(element => {\r\n        if (element instanceof Ordering) {\r\n          if (orderTree) {\r\n            throw new Error(\"Can't have multiple orderings\")\r\n          }\r\n          orderTree = element;\r\n        }\r\n      })\r\n    }\r\n    let q = new Query(entityTree, orderTree, [])\r\n    console.log(\"QUERY TREE\", { q, entityTree, elementsTree: queryElementsTree, orderTree })\r\n    return q\r\n  },\r\n\r\n  Entity: (id: Node) => new Subject(id.tree()),\r\n  \r\n  Order: (_by: Node, order: Node) => {\r\n    let orderTree = order.tree()\r\n    // debugger;\r\n    let ordering = new Ordering(orderTree)\r\n    console.log(\"ORDER TREE\", { orderTree, ordering })\r\n    // debugger;\r\n    return ordering;\r\n  },\r\n\r\n  ident: (fst: Node, rst: Node) =>\r\n    new Identifier(fst.sourceString + rst.sourceString),\r\n};\r\n\r\nconst semantics = grammar.createSemantics();\r\nsemantics.addOperation('tree', tree);\r\n\r\nexport default semantics;","const capitalize: (s: string) => string = (s: string) =>\r\n    s.charAt(0).toUpperCase() + s.slice(1)\r\n\r\nexport default {\r\n    capitalize\r\n}","import { Aeql } from './Aeql';\r\nexport default Aeql;","import { Query } from \"./Query\";\r\nimport grammar from './Grammar';\r\nimport semantics from \"./Semantics\";\r\nimport capitalism from \"./util/capitalism\";\r\n\r\n\r\ntype AttributeType = 'Text' | 'Int' | string\r\nexport type Persona = { [attribute: string]: AttributeType }\r\nexport type Personae = { [model: string]: Persona }\r\n\r\nexport type Entity = { id: number, [attr: string]: any }\r\nexport type Data = {\r\n    [collectionName: string]: Entity[]\r\n}\r\ninterface AeqlConfig {\r\n    personae: Personae\r\n    data?: Data\r\n}\r\nexport class Aeql {\r\n\r\n    public personae: Personae\r\n    public data?: Data\r\n\r\n    constructor(public config: AeqlConfig) {\r\n        this.personae = config.personae;\r\n        if (config.data) {\r\n            this.data = config.data;\r\n        }\r\n    }\r\n\r\n    public interpret(inputString: string): Query {\r\n        console.log(\"processing input\", inputString);\r\n        let match = grammar.match(inputString);\r\n        if (match.succeeded()) {\r\n            let s = semantics(match);\r\n            return s.tree();\r\n        } else {\r\n            throw new Error(\"Could not parse input string: \" + match.message);\r\n        }\r\n    }\r\n\r\n    public evaluate(q: Query): Entity[] {\r\n        if (this.data) {\r\n            return Aeql.processQuery(q, this.data)\r\n        } else {\r\n            throw new Error(\"No data provided!\")\r\n        }\r\n    }\r\n\r\n    public resolve(inputString: string): Entity[] {\r\n        return this.evaluate(this.interpret(inputString));\r\n    }\r\n\r\n    private static processQuery(q: Query, data: Data) {\r\n        let collectionName: string = capitalism.capitalize(\r\n            q.subject.getName()\r\n        )\r\n        console.log(\"LOOKUP COLLECTION\", { collectionName, data });\r\n        let collection = data[collectionName].slice();\r\n        if (q.order) {\r\n            let { order } = q\r\n            console.log(\"APPLY ORDER\", { order })\r\n            let orderName = order.getName()\r\n            collection = collection.sort((a, b) =>\r\n                a[orderName] > b[orderName] ? 1 : -1\r\n            )\r\n        }\r\n        return collection;\r\n    }\r\n}","import React from 'react';\r\nimport capitalism from \"../../Aeql/util/capitalism\";\r\nimport { Entity } from \"../../Aeql/Aeql\";\r\nimport './EntityTable.scss';\r\n\r\nexport const EntityTable: React.FC<{ collectionName?: string, models: Entity[] }> = (props) => {\r\n  let { models } = props;\r\n  return <section className='EntityTable'> \r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          {Object.entries(models[0]).map(([attr, val]) => <th key={attr}>\r\n            {capitalism.capitalize(attr)}\r\n          </th>)}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {models.map(model => <tr key={model.id}><>\r\n          {Object.entries(model).map(\r\n            ([attr, value]) => <td key={attr}>\r\n              {value}\r\n            </td>\r\n          )}\r\n        </>\r\n        </tr>)}\r\n      </tbody>\r\n    </table>\r\n  </section>\r\n}","import React, { Component } from 'react';\r\nimport { Query } from '../../Aeql/Query';\r\nimport Aeql from '../../Aeql';\r\nimport { Entity } from '../../Aeql/Aeql';\r\nimport { EntityTable } from './EntityTable';\r\n\r\nexport let aeql = new Aeql({\r\n  personae: {\r\n    Human: {\r\n      name: 'string',\r\n      age: 'int',\r\n    }\r\n  },\r\n  data: {\r\n    Humans: [\r\n      { id: 1, name: 'Zeta',   age: 59 },\r\n      { id: 2, name: 'Bob',    age: 23 },\r\n      { id: 3, name: 'Jim',    age: 19 },\r\n      { id: 4, name: 'Abel',   age: 24 },\r\n      { id: 5, name: 'Sawyer', age: 34 },\r\n    ]\r\n  }\r\n});\r\n\r\nclass AeqlQueryView extends React.Component<{\r\n  query: string,\r\n  resultData: Entity[],\r\n  parseAeql: Function\r\n}> {\r\n  public render() {\r\n    let { query, parseAeql, resultData } = this.props;\r\n    return <>\r\n      <h3>query playground</h3>\r\n      <p>enter your query here!</p>\r\n      <section style={{backgroundColor: '#e4eae9' }}>\r\n        <p>\r\n          the basic form of a query begins with <code>find...</code> or <code>get [model-or-persona-name]</code>\r\n        </p>\r\n        <p>you can order by attributes with <code>by [attribute name]</code></p>\r\n      </section>\r\n      <label>\r\n        ask aeql anything:\r\n        &nbsp;\r\n      <textarea\r\n        style={{ minWidth: '60vw', minHeight: '20vh'}}\r\n        id='query'\r\n        value={query}\r\n        onChange={(e)=>parseAeql(e.target.value)}\r\n      />\r\n      </label>\r\n      <section className='Result'>\r\n        {this.props.children}\r\n        <h3>result</h3>\r\n        {resultData.length &&\r\n            <EntityTable models={resultData} />\r\n        }\r\n      </section>\r\n      <section className='SchemaAndDataSet'>\r\n        <b>SCHEMA</b>\r\n        {Object.entries(aeql.personae).map(\r\n          ([name, persona]) => <section className='persona' key={name}>\r\n              <h3>Persona {name}</h3>\r\n              <ul>\r\n              {Object.entries(persona).map(\r\n                ([attrName, type]) => <div key={attrName}>\r\n                  {attrName} ({type})\r\n                </div>\r\n              )}</ul>\r\n            </section>\r\n        )}\r\n        </section>\r\n    </>\r\n  }\r\n\r\n}\r\n\r\nexport type QueryState = {\r\n  query: string,\r\n  result: string,\r\n  resultData: Entity[]\r\n}\r\n\r\nexport class AeqlQueryManager extends Component<{}, QueryState> {\r\n  state = { query: '', result: '', resultData: [] };\r\n  componentDidMount() {\r\n    this.parseAeql('find humans by name')\r\n  }\r\n  private parseAeql = (message: string) => {\r\n    let userInput: string = message;\r\n    if (userInput === '') {\r\n      this.setState({ query: '', result: '' })\r\n    } else {\r\n      let result = '';\r\n      let resultData: Entity[] = [];\r\n      try {\r\n        let q: Query = aeql.interpret(userInput);\r\n        result = `match: ${q.describe()}\\n`\r\n        resultData = aeql.evaluate(q)\r\n      } catch (e) {\r\n        result = e.message\r\n      }\r\n      this.setState({\r\n        query: userInput,\r\n        result,\r\n        resultData\r\n      });\r\n    }\r\n  };\r\n\r\n  public render() {\r\n    return <>\r\n      <section style={{backgroundColor: '#faf4f7'}}>\r\n        <AeqlQueryView\r\n          parseAeql={this.parseAeql}\r\n          query={this.state.query}\r\n          resultData={this.state.resultData}\r\n        >\r\n          {this.state.result}\r\n        </AeqlQueryView>\r\n      </section>\r\n      <section style={{backgroundColor: '#eaeaf3'}}>\r\n        <b>DATA</b>\r\n        {aeql.data && Object.entries(aeql.data).map(\r\n          ([collection, models]) => <EntityTable\r\n            key={collection}\r\n            collectionName={collection}\r\n            models={models}\r\n          />\r\n        )}\r\n      </section>\r\n    </>;\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { AeqlQueryManager } from './Components/AeqlQueryManager';\nconst AeqlText = () =>  {\n  return (<span className='Aeql-name' style={{ color: '#aeeaea', textShadow: '1.2px 1.2px #aeaeae', fontSize: '135%', fontWeight: 'bolder' }}>\n    aeql\n  </span>);\n}\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        hello aeql\n      </header>\n      <main className=\"App-main\">\n        <section className='Welcome' style={{ backgroundColor: '#fafaf3'}}>\n          <h1>let's learn all about <AeqlText />!</h1>\n          <p><AeqlText/>: it's a tiny query language</p>\n          <pre>find humans by name</pre>\n          {/* <pre>get count(employees), sum(employees.salary) by department</pre> */}\n          {/* <pre>find all dinosaurs by average(fossils.date)</pre> */}\n          <p>\n            <AeqlText/> emphasizes human values, encouraging the description\n            of personae in the system\n          </p>\n          {/* <pre>find employees by name whose job is accountant</pre> */}\n        </section>\n\n        <section className='QueryManager'>\n          <AeqlQueryManager />\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}