{"version":3,"sources":["Aeql/Grammar.ts","Aeql/util/capitalism.ts","App/Components/EntityTable.tsx","App/Components/AeqlQueryView.tsx","Aeql/Query.ts","Aeql/Semantics.ts","Aeql/BasicAeqlQueryResolver.ts","App/Services/Database.ts","Aeql/Aeql.ts","App/Components/HowTo.tsx","App/Components/AeqlQueryManager.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["grammar","capitalism","s","charAt","toUpperCase","slice","toLowerCase","EntityTable","props","models","length","react_default","a","createElement","className","collectionName","Object","entries","map","_ref","_ref2","slicedToArray","attr","key","model","id","Fragment","_ref3","_ref4","value","AeqlQueryView","_React$Component","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","textarea","intervalID","lastValue","polling","React","createRef","inherits","createClass","_this2","window","setInterval","current","val","parseAeql","clearInterval","resultData","ref","defaultValue","initialQuery","result","errors","style","textAlign","whiteSpace","split","error","EntityTable_EntityTable","Component","isNode","contents","require","readFileSync","ohm","grammarFromScriptElement","g","Identifier","IntegerLiteral","toString","HttpVehicle","url","Resource","identifier","via","nameValue","concat","describe","getValue","Subject","resources","arguments","undefined","projections","of","projectValues","project","_len","resourceNames","Array","_key","resourceName","resourceDescription","res","getName","join","Condition","attributeName","attributeExpr","Ordering","name","Query","subject","order","conditions","console","log","condition","ordering","tree","_find","entity","elements","entityTree","queryElementsTree","orderTree","conditionsTree","forEach","element","Error","Entity_simple","Entity_projection","_of","projects","proj","Resource_vehicle","_via","vehicle","Resource_basic","Criteria","_where","Conditions","attribute","is","Order","_by","Vehicle","_slash","URL","elems","sourceString","EmptyListOf","emptyListOf","NonemptyListOf","eFirst","_sep","eRest","toConsumableArray","nonemptyListOf","number_whole","digits","Number","ident","fst","rst","semantics","createSemantics","addOperation","BasicAeqlQueryResolver","data","objectSpread","_gatherResource","asyncToGenerator","regenerator_default","mark","_callee","resource","collection","collectionId","maybeVehicle","wrap","_context","prev","next","getVehicle","axios","get","getUrl","baseURL","sent","row","push","abrupt","stop","_x","apply","_gatherResources","_callee3","gatherers","resourceCollections","entities","_context3","_callee2","_context2","t0","gatherResource","t1","_x3","Promise","all","reduce","acc","curr","_x2","_inquire","_callee4","q","orderName","_context4","gatherResources","getResources","sort","b","getAttributeName","filter","it","matches","isProjected","projection","getProjects","_x4","alpha","beta","alphaName","alphaCollection","betaName","betaCollection","firstCollectionId","resourceId","resultCollection","allResourceAttrs","keys","allModelAttrs","belongToKey","pluralize","singular","hasOneKey","belongsToPattern","RegExp","hasOnePattern","belongingAttribute","find","match","hasOneAttribute","flatMap","otherIt","flat","el","idx","aeql","Aeql","config","personae","inputString","succeeded","message","_evaluate","processSimpleQueryManually","_resolve","evaluate","interpret","_processSimpleQueryManually","solver","inquire","Human","age","Employee","employee_number","salary","department_id","Department","area","Humans","Employees","Departments","HowTo","backgroundColor","AeqlQueryManager","_Component","_getPrototypeOf2","args","state","query","userInput","setState","HowTo_HowTo","AeqlQueryView_AeqlQueryView","_ref5","persona","_ref6","_ref7","attrName","type","_ref8","_ref9","_ref10","_ref11","AeqlText","color","textShadow","fontSize","fontWeight","App","App_AeqlText","AeqlQueryManager_AeqlQueryManager","Boolean","location","hostname","ReactDOM","render","src_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0f564304.chunk.js","sourcesContent":["import ohm, { Grammar } from 'ohm-js';\r\nimport isNode from 'detect-node';\r\n\r\nlet grammar;\r\nif (isNode) {\r\n  var fs = require('fs');\r\n  var contents = fs.readFileSync('./src/Aeql/Aeql.ohm');\r\n  grammar = ohm.grammar(contents);\r\n} else {\r\n  grammar = ohm.grammarFromScriptElement();\r\n}\r\nlet g: Grammar = grammar;\r\n\r\nexport default g;","const capitalize: (s: string) => string = (s: string) =>\r\n    s.charAt(0).toUpperCase() + s.slice(1)\r\n\r\nconst downcase: (s: string) => string = (s: string) => s.toLowerCase();\r\n\r\nexport default {\r\n    capitalize,\r\n    downcase,\r\n}","import React from 'react';\r\nimport capitalism from \"../../Aeql/util/capitalism\";\r\nimport './EntityTable.scss';\r\nimport { Entity } from '../../Aeql/Values';\r\n\r\n\r\nexport const EntityTable: React.FC<{ collectionName?: string, models: Entity[] }> = (props) => {\r\n  let { models } = props;\r\n  if (!models.length) {\r\n    return <p>Nothing.</p>\r\n  }\r\n  return <section className='EntityTable'> \r\n    <h3>{props.collectionName}</h3>\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          {Object.entries(models[0]).map(([attr, val]) => <th key={attr}>\r\n            {capitalism.capitalize(attr)}\r\n          </th>)}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {models.map(model => <tr key={model.id}><>\r\n          {Object.entries(model).map(\r\n            ([attr, value]) => <td key={attr}>\r\n              {!(value instanceof Object) ? value : \"[object]\"}\r\n            </td>\r\n          )}\r\n        </>\r\n        </tr>)}\r\n      </tbody>\r\n    </table>\r\n  </section>\r\n}","import React from 'react';\r\nimport { EntityTable } from './EntityTable';\r\nimport { Entity } from '../../Aeql/Values';\r\n\r\nexport interface QueryViewProps {\r\n  initialQuery?: string;\r\n errors: string,\r\n resultData: Entity[],\r\n parseAeql: Function\r\n result: string;\r\n}\r\n\r\n\r\nexport class AeqlQueryView extends React.Component<QueryViewProps> {\r\n  textarea: React.RefObject<any>;\r\n  intervalID: number = 0;\r\n  lastValue: string = 'nothing';\r\n  polling: boolean = false;\r\n  constructor(props: QueryViewProps) {\r\n    super(props);\r\n    this.textarea = React.createRef();\r\n  }\r\n  componentDidMount() {\r\n      this.intervalID = window.setInterval(() => {\r\n        if (this.lastValue && this.lastValue != this.textarea.current.value && !this.polling) {\r\n          let val = this.textarea.current.value;\r\n          this.props.parseAeql(val);\r\n          this.lastValue = val;\r\n        }\r\n      }, 150);\r\n  }\r\n  componentWillUnmount() {\r\n      clearInterval(this.intervalID);\r\n  }\r\n  public render() {\r\n    let { resultData } = this.props;\r\n    return <div className='AeqlQuery'>\r\n      <label>\r\n      <textarea id='query' ref={this.textarea} defaultValue={this.props.initialQuery || 'find humans'} />\r\n      </label>\r\n      <section className='Result'>\r\n        <h3>{this.props.result}</h3>\r\n        {this.props.errors && \r\n          <div style={{ textAlign: 'justify', whiteSpace: 'pre-wrap' }}>\r\n            {this.props.errors.split(\"\\n\").map(error => <p key={error}><code>{error}</code></p>)}\r\n          </div> ||\r\n\r\n        resultData instanceof Object && <EntityTable models={resultData} />}\r\n      </section>\r\n    </div>;\r\n  }\r\n}\r\n","import { Node } from 'ohm-js';\r\n\r\nexport interface QueryElement {\r\n    describe(): string\r\n}\r\n\r\nexport class Identifier implements QueryElement {\r\n    constructor(private value: string) {}\r\n    describe() {\r\n        return this.value;\r\n    }\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n}\r\n\r\nexport class IntegerLiteral implements QueryElement {\r\n    constructor(private value: number) {}\r\n    describe() { return this.value.toString(); }\r\n    getValue() { return this.value; }\r\n}\r\n\r\nexport class HttpVehicle {\r\n    constructor(public url: string) {}\r\n    getUrl() { return this.url; }\r\n    describe(): String {\r\n        return this.url;\r\n    }\r\n}\r\n\r\nexport class Resource implements QueryElement {\r\n    \r\n    static of(nameValue: string) {\r\n        return new Resource(\r\n            new Identifier(nameValue)\r\n        );\r\n    }\r\n\r\n    constructor(private identifier: Identifier, private via?: HttpVehicle) { }\r\n    describe(): string {\r\n        if (this.via) {\r\n            return `${this.identifier.describe()} via ${this.via.describe()}`;\r\n        } else {\r\n            return this.identifier.describe();\r\n        }\r\n    }\r\n\r\n    getName() {\r\n        return this.identifier.getValue();\r\n    }\r\n\r\n    hasVehicle() {\r\n        return !!this.via;\r\n    }\r\n\r\n    getVehicle() {\r\n        return this.via;\r\n    }\r\n\r\n}\r\n\r\nexport class Subject implements QueryElement {\r\n    static of(nameValue: string) {\r\n        return new Subject([ Resource.of(nameValue) ]);\r\n    }\r\n\r\n    static project(nameValue: string, projectValues: string[]) {\r\n        return new Subject(\r\n            [ Resource.of(nameValue) ],\r\n            projectValues.map(project => new Identifier(project)),\r\n        )\r\n    }\r\n\r\n    static join(...resourceNames: string[]) {\r\n        return new Subject(\r\n            resourceNames.map(resourceName => Resource.of(resourceName))\r\n        );\r\n    }\r\n\r\n    constructor(\r\n        private resources: Resource[] = [],\r\n        private projections: Identifier[] = []\r\n    ) { }\r\n\r\n    isProjected() {\r\n        return !!this.projections.length;\r\n    }\r\n\r\n    describe() {\r\n        let resourceDescription = this.resources.\r\n            map(res => res.getName()).join(' and ');\r\n\r\n        if (this.projections.length) {\r\n            return this.projections.map(project =>\r\n                project.describe()\r\n            ).join(\", \") + ` of ${resourceDescription}`;\r\n        } else {\r\n            return resourceDescription;\r\n        }\r\n    }\r\n\r\n    getResources() {\r\n        return this.resources;\r\n    }\r\n\r\n    getProjects() {\r\n        return this.projections;\r\n    }\r\n}\r\n\r\nexport class Condition implements QueryElement {\r\n    getAttributeName() {\r\n        return this.attributeName.getValue();\r\n    }\r\n    getValue() {\r\n        return this.attributeExpr.getValue();\r\n    }\r\n    constructor(private attributeName: Identifier, private attributeExpr: any) {\r\n    }\r\n\r\n    describe() {\r\n        return `${this.attributeName.describe()} is ${this.attributeExpr.describe()}`\r\n    }\r\n}\r\n\r\nexport class Ordering implements QueryElement {\r\n    constructor(private name: Identifier) {}\r\n    describe() {\r\n        return `${this.name.describe()}`\r\n    }\r\n    getName() {\r\n        return this.name.getValue();\r\n    }\r\n}\r\n\r\n\r\n\r\nexport class Query {\r\n    constructor(\r\n        public subject: Subject,\r\n        public order?: Ordering,\r\n        public conditions?: Condition[],\r\n        // public via?: Via\r\n    ) {}\r\n\r\n    describe() {\r\n        console.log(\"conditions\", this.conditions)\r\n        let conditions = '';\r\n        if (this.conditions && this.conditions.length) {\r\n            conditions = `where ${this.conditions.map(condition => condition.describe())}`;\r\n        } \r\n        let ordering = '';\r\n        if (this.order) {\r\n            ordering = `by ${this.order.describe()}`\r\n        }\r\n        let via = '';\r\n        // if (this.via) {\r\n        //     via = `via ${this.via.describe()}`\r\n        // }\r\n        return `Find ${this.subject.describe()} ${ordering} ${conditions} ${via}`;\r\n    }\r\n}\r\n","import grammar from './Grammar';\r\nimport { Query, Subject, Condition, Ordering, Identifier as Identifier, IntegerLiteral, Resource, HttpVehicle } from './Query';\r\nimport { Node } from 'ohm-js';\r\n\r\nconst tree = {\r\n  Query: (_find: Node, entity: Node, elements: Node) => {\r\n    let entityTree = entity.tree()\r\n    let queryElementsTree = elements.tree()\r\n    let orderTree: Ordering | undefined = undefined;\r\n    // let viaTree: Via | undefined = undefined;\r\n    let conditionsTree: Condition[] = []\r\n    if (queryElementsTree instanceof Array) {\r\n      queryElementsTree.forEach(element => {\r\n        if (element instanceof Ordering) {\r\n          if (orderTree) { throw new Error(\"Can't have multiple orderings\") }\r\n          orderTree = element;\r\n        // } else if (element instanceof Via) {\r\n        //   if (viaTree) { throw new Error(\"Can't have multiple vehicles (vias)\") }\r\n        //   viaTree = element;\r\n        } else if (element instanceof Array && element.length && \r\n            element[0] instanceof Condition) { \r\n          if (conditionsTree.length) { throw new Error(\"Can't have multiple conditions\") }\r\n              // presume all conditions?\r\n              conditionsTree = element;\r\n        }\r\n      })\r\n    }\r\n    let q = new Query(entityTree, orderTree, conditionsTree) //, viaTree)\r\n    return q\r\n  },\r\n\r\n  Entity_simple: (id: Node) => new Subject(id.tree()),\r\n  Entity_projection: (id: Node, _of: Node, projects: Node) => {\r\n    let proj = new Subject(\r\n      projects.tree(),\r\n      id.tree(),\r\n    )\r\n    console.log(\"PROJ\", proj)\r\n    return proj\r\n  },\r\n\r\n  Resource_vehicle: (id: Node, _via: Node, vehicle: Node) => {\r\n    return new Resource(id.tree(), vehicle.tree())\r\n  },\r\n\r\n  Resource_basic: (id: Node) => {\r\n    return new Resource(id.tree())\r\n  },\r\n\r\n  Criteria: (_where: Node, conditions: Node) => conditions.tree(),\r\n\r\n  Conditions: (conditions: Node) => conditions.tree(),\r\n\r\n  Condition: (attribute: Node, is: Node, value: Node) =>\r\n    new Condition(attribute.tree(), value.tree()),\r\n  \r\n  Order: (_by: Node, order: Node) => {\r\n    let orderTree = order.tree()\r\n    let ordering = new Ordering(orderTree)\r\n    return ordering;\r\n  },\r\n\r\n  Vehicle: (_slash: Node, url: Node) => {\r\n    let theVehicle: HttpVehicle = new HttpVehicle('/' + url.tree());\r\n    return theVehicle;\r\n  },\r\n\r\n  URL: (elems: Node) => {\r\n    return elems.sourceString\r\n  },\r\n\r\n  EmptyListOf: (): Node[] => [],\r\n  emptyListOf: (): Node[] => [],\r\n\r\n  NonemptyListOf: (eFirst: Node, _sep: any, eRest: Node) =>\r\n    [eFirst.tree(), ...eRest.tree()],\r\n\r\n  nonemptyListOf: (eFirst: Node, _sep: any, eRest: Node) =>\r\n    [eFirst.tree(), ...eRest.tree()],\r\n\r\n  number_whole: (digits: Node) =>\r\n    new IntegerLiteral(Number(digits.sourceString)),\r\n\r\n  ident: (fst: Node, rst: Node) =>\r\n    new Identifier(fst.sourceString + rst.sourceString),\r\n};\r\n\r\nconst semantics = grammar.createSemantics();\r\nsemantics.addOperation('tree', tree);\r\n\r\nexport default semantics;","import { Query, Condition, Resource, HttpVehicle } from \"./Query\";\r\nimport capitalism from \"./util/capitalism\";\r\nimport axios from 'axios';\r\nimport pluralize from 'pluralize';\r\nimport { AeqlQueryResolver, Data, Entity, ResourceCollection } from \"./Values\";\r\nexport class BasicAeqlQueryResolver implements AeqlQueryResolver {\r\n    data: Data;\r\n    constructor(data: Data) {\r\n        this.data = { ...data };\r\n    }\r\n    private async gatherResource(resource: Resource): Promise<Entity[]> {\r\n        let data = this.data;\r\n        let collection: Entity[] = [];\r\n        let collectionId: string = resource.getName();\r\n        let collectionName = capitalism.capitalize(collectionId);\r\n        let maybeVehicle = resource.getVehicle();\r\n        if (maybeVehicle) {\r\n            let vehicle: HttpVehicle = maybeVehicle;\r\n            let result = await axios.get(vehicle.getUrl(), {\r\n                baseURL: 'https://jsonplaceholder.typicode.com'\r\n            });\r\n            collection = result.data;\r\n        }\r\n        else if (data[collectionName] && data[collectionName].length) {\r\n            data[collectionName].forEach(row => collection.push({ ...row }));\r\n        }\r\n        else {\r\n            throw new Error(`Could not gather data for resource ${resource.describe()}`);\r\n        }\r\n        return collection;\r\n    }\r\n\r\n    private static join(alpha: ResourceCollection, beta: ResourceCollection): ResourceCollection {\r\n        let { resource: alphaName, collection: alphaCollection } = alpha;\r\n        let { resource: betaName, collection: betaCollection } = beta;\r\n        let firstCollectionId = alphaName.getName();\r\n        let resourceId = betaName.getName();\r\n        let resultCollection: Entity[] = [];\r\n        if (resourceId !== firstCollectionId) {\r\n            if (betaCollection && betaCollection.length) {\r\n                let resource = betaCollection.slice().map(a => ({ ...a }));\r\n                if (resource.length) {\r\n                    let allResourceAttrs = Object.keys(resource[0]);\r\n                    let allModelAttrs = Object.keys(alphaCollection[0]);\r\n                    let belongToKey = pluralize.singular(capitalism.downcase(firstCollectionId)); //+ \"_id\"\r\n                    let hasOneKey = pluralize.singular(capitalism.downcase(resourceId)); //+ \"_id\"\r\n                    let belongsToPattern = new RegExp(belongToKey + \"?.id\", \"i\");\r\n                    let hasOnePattern = new RegExp(hasOneKey + \"?.id\", \"i\");\r\n                    let belongingAttribute = allResourceAttrs.find(attr => attr.match(belongsToPattern)) || '';\r\n                    let hasOneAttribute = allModelAttrs.find(attr => attr.match(hasOnePattern)) || '';\r\n                    if (belongingAttribute || hasOneAttribute) {\r\n                        resultCollection = alphaCollection.flatMap(it => {\r\n                            if (it.id) {\r\n                                let res = resource.find(otherIt => belongingAttribute && otherIt[belongingAttribute] === it.id ||\r\n                                    hasOneAttribute && it[hasOneAttribute] == otherIt.id);\r\n                                if (res) {\r\n                                    return { ...it, ...res };\r\n                                }\r\n                            }\r\n                        }).flat().filter(el => el !== undefined).map((it, idx) => {\r\n                            // delete it.id\r\n                            it.id = idx + 1;\r\n                            if (belongingAttribute) {\r\n                                // delete it[belongingAttribute]\r\n                            }\r\n                            if (hasOneAttribute) {\r\n                                // delete it[hasOneAttribute]\r\n                            }\r\n                            return it;\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return { resource: alphaName, collection: resultCollection };\r\n    }\r\n    private async gatherResources(resources: Resource[]): Promise<Entity[]> {\r\n        let gatherers: Promise<ResourceCollection>[] = resources.map(async (resource) => { return { resource, collection: await this.gatherResource(resource) }; });\r\n        let resourceCollections: ResourceCollection[] = await Promise.all(gatherers);\r\n        let entities: ResourceCollection = resourceCollections.reduce((acc, curr) => BasicAeqlQueryResolver.join(acc, curr));\r\n        return entities.collection;\r\n    }\r\n    public async inquire(q: Query): Promise<Entity[]> {\r\n        console.log(\"PROCESS SIMPLE QUERY MANUALLY\", { q });\r\n        let collection: Entity[] = await this.gatherResources(q.subject.getResources());\r\n        if (q.order) {\r\n            let { order } = q;\r\n            let orderName = order.getName();\r\n            collection = collection.sort((a, b) => a[orderName] > b[orderName] ? 1 : -1);\r\n        }\r\n        if (q.conditions) {\r\n            let { conditions } = q;\r\n            conditions.forEach((condition: Condition) => {\r\n                let attr = condition.getAttributeName();\r\n                let val = condition.getValue();\r\n                collection = collection.filter(it => {\r\n                    let matches = it[attr] == val;\r\n                    console.log({ it, matches });\r\n                    return !!matches;\r\n                });\r\n                console.log(\"APPLY CONDITION\", { condition, collection });\r\n            });\r\n        }\r\n        if (q.subject.isProjected()) {\r\n            collection = collection.map(it => {\r\n                let projection: {\r\n                    id: number;\r\n                    [key: string]: any;\r\n                } = {\r\n                    id: it.id\r\n                };\r\n                q.subject.getProjects().forEach(project => {\r\n                    let val: string = project.getValue();\r\n                    projection[val] = it[val];\r\n                });\r\n                console.log(\"PROJECTED\", { it, projection });\r\n                return projection;\r\n            });\r\n        }\r\n        return collection;\r\n    }\r\n}\r\n","import Aeql from \"../../Aeql\";\r\n// import { Int}\r\n\r\nexport let aeql = new Aeql({\r\n  personae: {\r\n    Human: {\r\n      name: 'Text',\r\n      age: 'Int',\r\n    },\r\n    Employee: {\r\n      name: 'Text',\r\n      employee_number: 'Int',\r\n      age: 'Int',\r\n      salary: 'Int',\r\n      department_id: 'Id',\r\n    }\r\n  },\r\n  models: {\r\n    Department: {\r\n      area: 'Text',\r\n    }\r\n  },\r\n  data: {\r\n    Humans: [\r\n      { id: 1, name: 'Zeta',   age: 59 },\r\n      { id: 2, name: 'Bob',    age: 23 },\r\n      { id: 3, name: 'Jim',    age: 19 },\r\n      { id: 4, name: 'Abel',   age: 24 },\r\n      { id: 5, name: 'Sawyer', age: 34 },\r\n    ],\r\n    Employees: [\r\n      { id: 1, name: 'Rhonda',            department_id: 1, employee_number: 1002, age: 47, salary: 14000 },\r\n      { id: 2, name: 'Barbara-Anniston',  department_id: 1, employee_number: 1034, age: 23, salary: 18000 },\r\n      { id: 3, name: 'Carol Andrews',     department_id: 2, employee_number: 1045, age: 35, salary: 10000 },\r\n      { id: 4, name: 'Sandra Amberg',     department_id: 3, employee_number: 5044, age: 42, salary: 18500 },\r\n      { id: 5, name: 'Andra Saunders',    department_id: 3, employee_number: 231, age: 23, salary: 8000 },\r\n      { id: 6, name: 'Exandra Calabanza', department_id: 3, employee_number: 1, age: 68, salary: 12000 },\r\n    ],\r\n    Departments: [\r\n      { id: 1, area: 'Finance' },\r\n      { id: 2, area: 'Human Resources' },\r\n      { id: 3, area: 'Logistics' },\r\n    ]\r\n  }\r\n});","import { Query} from \"./Query\";\r\nimport grammar from './Grammar';\r\nimport semantics from \"./Semantics\";\r\nimport { BasicAeqlQueryResolver } from \"./BasicAeqlQueryResolver\";\r\nimport { Personae, Models, Data, Entity } from \"./Values\";\r\n\r\ninterface AeqlConfig {\r\n    personae?: Personae\r\n    models: Models\r\n    data?: Data\r\n}\r\n\r\nexport class Aeql {\r\n    public personae?: Personae\r\n    public models?: Models\r\n    public data?: Data\r\n\r\n    constructor(public config: AeqlConfig) {\r\n        if (config.personae) {\r\n            this.personae = config.personae;\r\n        }\r\n        if (config.data) {\r\n            this.data = config.data;\r\n        }\r\n        if (config.models) {\r\n            this.models = config.models;\r\n        }\r\n    }\r\n\r\n    public interpret(inputString: string): Query {\r\n        let match = grammar.match(inputString);\r\n        if (match.succeeded()) {\r\n            let s = semantics(match);\r\n            return s.tree();\r\n        } else {\r\n            throw new Error(\"Could not parse input string: \" + match.message);\r\n        }\r\n    }\r\n\r\n    public async evaluate(q: Query): Promise<Entity[]> {\r\n        if (this.data) {\r\n            let result = await Aeql.processSimpleQueryManually(q, this.data || {})\r\n            return result;\r\n        } else {\r\n            throw new Error(\"No data provided!\")\r\n        }\r\n    }\r\n\r\n    public async resolve(inputString: string): Promise<Entity[]> {\r\n        return await this.evaluate(this.interpret(inputString));\r\n    }\r\n\r\n    private static async processSimpleQueryManually(q: Query, data: Data): Promise<Entity[]> {\r\n        let solver = new BasicAeqlQueryResolver(data);\r\n        return solver.inquire(q);\r\n    }\r\n}","import React from 'react';\r\nexport const HowTo: React.FC = () => <section className=\"Tips\" style={{ backgroundColor: '#e4eae9' }}>\r\n    <h3>how-to</h3>\r\n    <dl>\r\n        <dt>QUERY FORM</dt>\r\n        <dd>\r\n            the most basic form of a query begins\r\n            with <code>find</code> or <code>get</code>&nbsp;\r\n            followed by a model name\r\n          </dd>\r\n        <code>find humans</code>\r\n        <hr />\r\n        <dt>ORDERING</dt>\r\n        <dd>\r\n            you can order by attributes with <code>by</code>&nbsp;\r\n            followed by the attribute name\r\n          </dd>\r\n        <code>find employees by salary</code>\r\n        <hr />\r\n        <dt>SELECTION</dt>\r\n        <dd>pick rows using <code>with</code>, <code>where</code> or <code>whose</code> </dd>\r\n        <code>find humans whose age is 34</code>\r\n        <hr />\r\n        <dt>PROJECTION</dt>\r\n        <dd>pick columns using <code>find ... of</code></dd>\r\n        <code>find name, salary of employees where age is 47</code>\r\n        <hr/>\r\n        <dt>FETCHING</dt>\r\n        <dd>load data with <code>via</code> followed by the path</dd>\r\n        <code>find users via /users whose name is Bret</code>\r\n        <hr/>\r\n        <dt>JOINING</dt>\r\n        <dd>meld table data together with <code>find ... and ...`</code></dd>\r\n        <code>find employees and departments</code>\r\n    </dl>\r\n</section> ","import React, { Component, TextareaHTMLAttributes } from 'react';\r\nimport { Query } from '../../Aeql/Query';\r\nimport { EntityTable } from './EntityTable';\r\nimport { AeqlQueryView } from './AeqlQueryView';\r\nimport { aeql } from '../Services/Database';\r\nimport { HowTo } from './HowTo';\r\nimport { Entity } from '../../Aeql/Values';\r\nexport type QueryState = {\r\n  query: string,\r\n  result: string,\r\n  errors: string,\r\n  resultData: Entity[]\r\n}\r\n\r\nexport class AeqlQueryManager extends Component<{}, QueryState> {\r\n  state = {\r\n    query: '',\r\n    errors: '',\r\n    result: '',\r\n    resultData: []\r\n  };\r\n\r\n  private parseAeql = async (message: string) => {\r\n    let userInput: string = message;\r\n    if (userInput === '') {\r\n      this.setState({ query: '', result: '' })\r\n    } else {\r\n      let result = '';\r\n      let errors = undefined;\r\n      let resultData: Entity[] = [];\r\n      try {\r\n        let q: Query = aeql.interpret(userInput);\r\n        result = q.describe() //`match: ${q.describe()}\\n`\r\n        resultData = await aeql.evaluate(q)\r\n      } catch (e) {\r\n        errors = e.message\r\n      }\r\n      this.setState({\r\n        query: userInput,\r\n        result,\r\n        errors,\r\n        resultData,\r\n      });\r\n    }\r\n  };\r\n\r\n  public render() {\r\n    return <div>\r\n      <h3>query playground</h3>\r\n      <section className=\"TipsAndQuery\">\r\n        <HowTo />\r\n\r\n        <AeqlQueryView\r\n          initialQuery='find humans by name'\r\n          errors={this.state.errors}\r\n          parseAeql={this.parseAeql}\r\n          result={this.state.result}\r\n          resultData={this.state.resultData}\r\n        >\r\n        </AeqlQueryView>\r\n      </section>\r\n      <hr/>\r\n      <h4>Playground Data</h4>\r\n      <section className='SchemaAndData'>\r\n        <section className='Data'>\r\n          {aeql.data && Object.entries(aeql.data).map(\r\n            ([collection, models]) => <EntityTable\r\n              key={collection}\r\n              collectionName={collection}\r\n              models={models}\r\n            />\r\n          )}\r\n        </section>\r\n        <section className='Schema'>\r\n          <i>SCHEMA</i>\r\n          <h3>PERSONAE</h3>\r\n\r\n          {aeql.personae && Object.entries(aeql.personae).map(([name, persona]) => <section className='persona' key={name}>\r\n            <h5>Persona {name}</h5>\r\n            <div>\r\n              {Object.entries(persona).map(([attrName, type]) => <div key={attrName}>\r\n                {attrName} ({type})\r\n                </div>)}</div>\r\n          </section>)}\r\n          <h3>MODELS</h3>\r\n\r\n          {aeql.models && Object.entries(aeql.models).map(([name, model]) => <section className='models' key={name}>\r\n            <h5>Model {name}</h5>\r\n            <div>\r\n              {Object.entries(model).map(([attrName, type]) => <div key={attrName}>\r\n                {attrName} ({type})\r\n                </div>)}</div>\r\n          </section>)}\r\n\r\n        </section>\r\n      </section>\r\n    </div>;\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport { AeqlQueryManager } from './Components/AeqlQueryManager';\n\nconst AeqlText = () =>  {\n  return (<span className='Aeql-name' style={{ color: '#aeeaea', textShadow: '1.2px 1.2px #aeaeae', fontSize: '135%', fontWeight: 'bolder' }}>\n    aeql\n  </span>);\n}\n\nconst App: React.FC = () => {\n  return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>aeql-lang</h1>\n        </header>\n        <div className=\"App-wrapper\">\n          <main className=\"App-main\">\n            <section className='Welcome Card' style={{ backgroundColor: '#fafaf3' }}>\n              <h4>let's learn all about <AeqlText />!</h4>\n              <ul>\n                <li>naturalism</li>\n                <li>human values</li>\n                <li>categoreal design</li>\n              </ul>\n              <code>find humans who are awesome</code>\n            </section>\n\n            <section className='QueryManager Card'>\n              <AeqlQueryManager />\n            </section>\n          </main>\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n// import Trianglify from 'trianglify';\n// var pattern = Trianglify({\n//     width: window.innerWidth,\n//     height: window.innerHeight\n// });\n// document.body.appendChild(pattern.canvas())\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}