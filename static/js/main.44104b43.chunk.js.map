{"version":3,"sources":["Aeql/Grammar.ts","Aeql/util/capitalism.ts","App/Components/EntityTable.tsx","App/Components/AeqlQueryView.tsx","Aeql/Query.ts","Aeql/Semantics.ts","App/Services/Database.ts","Aeql/Aeql.ts","App/Components/HowTo.tsx","App/Components/AeqlQueryManager.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["grammar","capitalism","s","charAt","toUpperCase","slice","toLowerCase","EntityTable","props","models","length","react_default","a","createElement","className","collectionName","Object","entries","map","_ref","_ref2","slicedToArray","attr","key","model","id","Fragment","_ref3","_ref4","value","AeqlQueryView","_React$Component","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","textarea","intervalID","lastValue","polling","React","createRef","inherits","createClass","_this2","window","setInterval","current","val","parseAeql","clearInterval","resultData","ref","defaultValue","initialQuery","result","errors","style","textAlign","whiteSpace","split","error","EntityTable_EntityTable","Component","isNode","contents","require","readFileSync","ohm","grammarFromScriptElement","g","Identifier","IntegerLiteral","toString","Subject","resources","arguments","undefined","projections","nameValue","projectValues","project","_len","resourceNames","Array","_key","resourceName","resourceDescription","res","getValue","join","describe","concat","Condition","attributeName","attributeExpr","Ordering","name","HttpVehicle","url","Via","vehicle","Query","subject","order","conditions","via","console","log","condition","ordering","tree","_find","entity","elements","entityTree","queryElementsTree","orderTree","viaTree","conditionsTree","forEach","element","Error","Entity_simple","Entity_projection","_of","projects","proj","Criteria","_where","Conditions","attribute","is","Order","_by","_via","Vehicle","_slash","URL","elems","sourceString","EmptyListOf","emptyListOf","NonemptyListOf","eFirst","_sep","eRest","toConsumableArray","nonemptyListOf","number_whole","digits","Number","ident","fst","rst","semantics","createSemantics","addOperation","aeql","Aeql","config","personae","data","inputString","match","succeeded","message","_evaluate","asyncToGenerator","regenerator_default","mark","_callee","q","wrap","_context","prev","next","processSimpleQueryManually","sent","abrupt","stop","_x","apply","_resolve","_callee2","_context2","evaluate","interpret","_x2","_processSimpleQueryManually","_callee3","collection","firstCollectionId","orderName","_context3","getResources","objectSpread","resourceId","resource","allResourceAttrs","keys","allModelAttrs","belongToKey","pluralize","singular","hasOneKey","belongingAttribute","find","hasOneAttribute","flatMap","it","matchingResource","otherIt","assign","item","flat","filter","el","axios","get","getUrl","baseURL","getName","sort","b","getAttributeName","matches","isProjected","projection","getProjects","_x3","_x4","Human","age","Employee","employee_number","salary","department_id","Department","area","Humans","Employees","Departments","HowTo","backgroundColor","AeqlQueryManager","_Component","_getPrototypeOf2","args","state","query","userInput","setState","t0","HowTo_HowTo","AeqlQueryView_AeqlQueryView","_ref5","persona","_ref6","_ref7","attrName","type","_ref8","_ref9","_ref10","_ref11","AeqlText","color","textShadow","fontSize","fontWeight","App","App_AeqlText","AeqlQueryManager_AeqlQueryManager","Boolean","location","hostname","ReactDOM","render","src_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.44104b43.chunk.js","sourcesContent":["import ohm, { Grammar } from 'ohm-js';\r\nimport isNode from 'detect-node';\r\n\r\nlet grammar;\r\nif (isNode) {\r\n  var fs = require('fs');\r\n  var contents = fs.readFileSync('./src/Aeql/Aeql.ohm');\r\n  grammar = ohm.grammar(contents);\r\n} else {\r\n  grammar = ohm.grammarFromScriptElement();\r\n}\r\nlet g: Grammar = grammar;\r\n\r\nexport default g;","const capitalize: (s: string) => string = (s: string) =>\r\n    s.charAt(0).toUpperCase() + s.slice(1)\r\n\r\nconst downcase: (s: string) => string = (s: string) => s.toLowerCase();\r\n\r\nexport default {\r\n    capitalize,\r\n    downcase,\r\n}","import React from 'react';\r\nimport capitalism from \"../../Aeql/util/capitalism\";\r\nimport { Entity } from \"../../Aeql/Aeql\";\r\nimport './EntityTable.scss';\r\n\r\nexport const EntityTable: React.FC<{ collectionName?: string, models: Entity[] }> = (props) => {\r\n  let { models } = props;\r\n  if (!models.length) {\r\n    return <p>Nothing.</p>\r\n  }\r\n  return <section className='EntityTable'> \r\n    <h3>{props.collectionName}</h3>\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          {Object.entries(models[0]).map(([attr, val]) => <th key={attr}>\r\n            {capitalism.capitalize(attr)}\r\n          </th>)}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {models.map(model => <tr key={model.id}><>\r\n          {Object.entries(model).map(\r\n            ([attr, value]) => <td key={attr}>\r\n              {!(value instanceof Object) ? value : \"[object]\"}\r\n            </td>\r\n          )}\r\n        </>\r\n        </tr>)}\r\n      </tbody>\r\n    </table>\r\n  </section>\r\n}","import React from 'react';\r\nimport { EntityTable } from './EntityTable';\r\nimport { Entity } from '../../Aeql/Aeql';\r\n\r\nexport interface QueryViewProps {\r\n  initialQuery?: string;\r\n errors: string,\r\n resultData: Entity[],\r\n parseAeql: Function\r\n result: string;\r\n}\r\n\r\n\r\nexport class AeqlQueryView extends React.Component<QueryViewProps> {\r\n  textarea: React.RefObject<any>;\r\n  intervalID: number = 0;\r\n  lastValue: string = 'nothing';\r\n  polling: boolean = false;\r\n  constructor(props: QueryViewProps) {\r\n    super(props);\r\n    this.textarea = React.createRef();\r\n  }\r\n  componentDidMount() {\r\n      this.intervalID = window.setInterval(() => {\r\n        if (this.lastValue && this.lastValue != this.textarea.current.value && !this.polling) {\r\n          let val = this.textarea.current.value;\r\n          this.props.parseAeql(val);\r\n          this.lastValue = val;\r\n        }\r\n      }, 150);\r\n  }\r\n  componentWillUnmount() {\r\n      clearInterval(this.intervalID);\r\n  }\r\n  public render() {\r\n    let { resultData } = this.props;\r\n    return <div className='AeqlQuery'>\r\n      <label>\r\n      <textarea id='query' ref={this.textarea} defaultValue={this.props.initialQuery || 'find humans'} />\r\n      </label>\r\n      <section className='Result'>\r\n        <h3>{this.props.result}</h3>\r\n        {this.props.errors && \r\n          <div style={{ textAlign: 'justify', whiteSpace: 'pre-wrap' }}>\r\n            {this.props.errors.split(\"\\n\").map(error => <p key={error}><code>{error}</code></p>)}\r\n          </div> ||\r\n\r\n        resultData instanceof Object && <EntityTable models={resultData} />}\r\n      </section>\r\n    </div>;\r\n  }\r\n}\r\n","import { Node } from 'ohm-js';\r\n\r\nexport interface QueryElement {\r\n    describe(): string\r\n}\r\n\r\nexport class Identifier implements QueryElement {\r\n    constructor(private value: string) {}\r\n    describe() {\r\n        return this.value;\r\n    }\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n}\r\n\r\nexport class IntegerLiteral implements QueryElement {\r\n    constructor(private value: number) {}\r\n    describe() { return this.value.toString(); }\r\n    getValue() { return this.value; }\r\n}\r\n\r\nexport class Subject implements QueryElement {\r\n    static of(nameValue: string) {\r\n        return new Subject(\r\n            [ new Identifier(nameValue) ]\r\n        );\r\n    }\r\n\r\n    static project(nameValue: string, projectValues: string[]) {\r\n        return new Subject(\r\n            [ new Identifier(nameValue) ],\r\n            projectValues.map(project => new Identifier(project)),\r\n        )\r\n    }\r\n\r\n    static join(...resourceNames: string[]) {\r\n        return new Subject(\r\n            resourceNames.map(resourceName => new Identifier(resourceName))\r\n        );\r\n    }\r\n\r\n    constructor(\r\n        private resources: Identifier[] = [],\r\n        private projections: Identifier[] = []\r\n    ) { }\r\n\r\n    isProjected() {\r\n        return !!this.projections.length;\r\n    }\r\n\r\n    describe() {\r\n        let resourceDescription = this.resources.map(res => res.getValue()).join(' and ');\r\n\r\n        if (this.projections.length) {\r\n            return this.projections.map(project => project.describe()).join(\", \")\r\n                + ` of ${resourceDescription}`;\r\n\r\n        } else {\r\n            return resourceDescription;\r\n        }\r\n    }\r\n\r\n    getResources() {\r\n        return this.resources;\r\n    }\r\n\r\n    getProjects() {\r\n        return this.projections;\r\n    }\r\n}\r\n\r\nexport class Condition implements QueryElement {\r\n    getAttributeName() {\r\n        return this.attributeName.getValue();\r\n    }\r\n    getValue() {\r\n        return this.attributeExpr.getValue();\r\n    }\r\n    constructor(private attributeName: Identifier, private attributeExpr: any) {\r\n    }\r\n\r\n    describe() {\r\n        return `${this.attributeName.describe()} is ${this.attributeExpr.describe()}`\r\n    }\r\n}\r\n\r\nexport class Ordering implements QueryElement {\r\n    constructor(private name: Identifier) {}\r\n    describe() {\r\n        return `${this.name.describe()}`\r\n    }\r\n    getName() {\r\n        return this.name.getValue();\r\n    }\r\n}\r\n\r\nexport class HttpVehicle {\r\n    constructor(public url: string) {}\r\n\r\n}\r\n\r\nexport class Via implements QueryElement {\r\n    constructor(private vehicle: HttpVehicle) {} \r\n    describe() {\r\n        return `${this.vehicle.url}`\r\n    }\r\n\r\n    getUrl(): any {\r\n        return this.vehicle.url\r\n    }\r\n}\r\n\r\nexport class Query {\r\n    constructor(\r\n        public subject: Subject,\r\n        public order?: Ordering,\r\n        public conditions?: Condition[],\r\n        public via?: Via\r\n    ) {}\r\n\r\n    describe() {\r\n        console.log(\"conditions\", this.conditions)\r\n        let conditions = '';\r\n        if (this.conditions && this.conditions.length) {\r\n            conditions = `where ${this.conditions.map(condition => condition.describe())}`;\r\n        } \r\n        let ordering = '';\r\n        if (this.order) {\r\n            ordering = `by ${this.order.describe()}`\r\n        }\r\n        let via = '';\r\n        if (this.via) {\r\n            via = `via ${this.via.describe()}`\r\n        }\r\n        return `Find ${this.subject.describe()} ${ordering} ${conditions} ${via}`;\r\n    }\r\n}\r\n","import grammar from './Grammar';\r\nimport { Query, Subject, Condition, Ordering, Identifier as Identifier, Via, HttpVehicle, IntegerLiteral } from './Query';\r\nimport { Node } from 'ohm-js';\r\n\r\nconst tree = {\r\n  Query: (_find: Node, entity: Node, elements: Node) => {\r\n    let entityTree = entity.tree()\r\n    let queryElementsTree = elements.tree()\r\n    let orderTree: Ordering | undefined = undefined;\r\n    let viaTree: Via | undefined = undefined;\r\n    let conditionsTree: Condition[] = []\r\n    if (queryElementsTree instanceof Array) {\r\n      queryElementsTree.forEach(element => {\r\n        if (element instanceof Ordering) {\r\n          if (orderTree) { throw new Error(\"Can't have multiple orderings\") }\r\n          orderTree = element;\r\n        } else if (element instanceof Via) {\r\n          if (viaTree) { throw new Error(\"Can't have multiple vehicles (vias)\") }\r\n          viaTree = element;\r\n        } else if (element instanceof Array && element.length && \r\n            element[0] instanceof Condition) { \r\n          if (conditionsTree.length) { throw new Error(\"Can't have multiple conditions\") }\r\n              // presume all conditions?\r\n              conditionsTree = element;\r\n        }\r\n      })\r\n    }\r\n    let q = new Query(entityTree, orderTree, conditionsTree, viaTree)\r\n    return q\r\n  },\r\n\r\n  Entity_simple: (id: Node) => new Subject(id.tree()),\r\n  Entity_projection: (id: Node, _of: Node, projects: Node) => {\r\n    let proj = new Subject(\r\n      projects.tree(),\r\n      id.tree(),\r\n    )\r\n    console.log(\"PROJ\", proj)\r\n    return proj\r\n  },\r\n\r\n  // Resource_join: (first: Node, _and)\r\n\r\n  Criteria: (_where: Node, conditions: Node) => conditions.tree(),\r\n\r\n  Conditions: (conditions: Node) => conditions.tree(),\r\n\r\n  Condition: (attribute: Node, is: Node, value: Node) =>\r\n    new Condition(attribute.tree(), value.tree()),\r\n  \r\n  Order: (_by: Node, order: Node) => {\r\n    let orderTree = order.tree()\r\n    let ordering = new Ordering(orderTree)\r\n    return ordering;\r\n  },\r\n\r\n  Via: (_via: Node, vehicle: Node) => {\r\n    let theVia = new Via(vehicle.tree());\r\n    return theVia;\r\n  },\r\n\r\n  Vehicle: (_slash: Node, url: Node) => {\r\n    let theVehicle: HttpVehicle = new HttpVehicle('/' + url.tree());\r\n    return theVehicle;\r\n  },\r\n\r\n  URL: (elems: Node) => {\r\n    return elems.sourceString\r\n  },\r\n\r\n  EmptyListOf: (): Node[] => [],\r\n  emptyListOf: (): Node[] => [],\r\n\r\n  NonemptyListOf: (eFirst: Node, _sep: any, eRest: Node) =>\r\n    [eFirst.tree(), ...eRest.tree()],\r\n\r\n  nonemptyListOf: (eFirst: Node, _sep: any, eRest: Node) =>\r\n    [eFirst.tree(), ...eRest.tree()],\r\n\r\n  number_whole: (digits: Node) =>\r\n    new IntegerLiteral(Number(digits.sourceString)),\r\n\r\n  ident: (fst: Node, rst: Node) =>\r\n    new Identifier(fst.sourceString + rst.sourceString),\r\n};\r\n\r\nconst semantics = grammar.createSemantics();\r\nsemantics.addOperation('tree', tree);\r\n\r\nexport default semantics;","import Aeql from \"../../Aeql\";\r\n// import { Int}\r\n\r\nexport let aeql = new Aeql({\r\n  personae: {\r\n    Human: {\r\n      name: 'Text',\r\n      age: 'Int',\r\n    },\r\n    Employee: {\r\n      name: 'Text',\r\n      employee_number: 'Int',\r\n      age: 'Int',\r\n      salary: 'Int',\r\n      department_id: 'Id',\r\n    }\r\n  },\r\n  models: {\r\n    Department: {\r\n      area: 'Text',\r\n    }\r\n  },\r\n  data: {\r\n    Humans: [\r\n      { id: 1, name: 'Zeta',   age: 59 },\r\n      { id: 2, name: 'Bob',    age: 23 },\r\n      { id: 3, name: 'Jim',    age: 19 },\r\n      { id: 4, name: 'Abel',   age: 24 },\r\n      { id: 5, name: 'Sawyer', age: 34 },\r\n    ],\r\n    Employees: [\r\n      { id: 1, name: 'Rhonda',            department_id: 1, employee_number: 1002, age: 47, salary: 14000 },\r\n      { id: 2, name: 'Barbara-Anniston',  department_id: 1, employee_number: 1034, age: 23, salary: 18000 },\r\n      { id: 3, name: 'Carol Andrews',     department_id: 2, employee_number: 1045, age: 35, salary: 10000 },\r\n      { id: 4, name: 'Sandra Amberg',     department_id: 3, employee_number: 5044, age: 42, salary: 18500 },\r\n      { id: 5, name: 'Andra Saunders',    department_id: 3, employee_number: 231, age: 23, salary: 8000 },\r\n      { id: 6, name: 'Exandra Calabanza', department_id: 3, employee_number: 1, age: 68, salary: 12000 },\r\n    ],\r\n    Departments: [\r\n      { id: 1, area: 'Finance' },\r\n      { id: 2, area: 'Human Resources' },\r\n      { id: 3, area: 'Logistics' },\r\n    ]\r\n  }\r\n});","import { Query, Condition, Identifier } from \"./Query\";\r\nimport grammar from './Grammar';\r\nimport semantics from \"./Semantics\";\r\nimport capitalism from \"./util/capitalism\";\r\nimport axios from 'axios';\r\nimport pluralize from 'pluralize';\r\n\r\ntype AttributeType = 'Text' | 'Int' | 'Id' // | string\r\n\r\nexport type Model = { [attribute: string]: AttributeType }\r\nexport type Models = { [modelNaem: string]: Model }\r\n\r\nexport type Persona = { [attribute: string]: AttributeType }\r\nexport type Personae = { [personaName: string]: Persona }\r\n\r\nexport type Entity = { id: number, [attr: string]: any }\r\nexport type Data = {\r\n    [collectionName: string]: Entity[]\r\n}\r\ninterface AeqlConfig {\r\n    personae?: Personae\r\n    models: Models\r\n    data?: Data\r\n}\r\nexport class Aeql {\r\n    public personae?: Personae\r\n    public models?: Models\r\n    public data?: Data\r\n\r\n    constructor(public config: AeqlConfig) {\r\n        if (config.personae) {\r\n            this.personae = config.personae;\r\n        }\r\n        if (config.data) {\r\n            this.data = config.data;\r\n        }\r\n        if (config.models) {\r\n            this.models = config.models;\r\n        }\r\n    }\r\n\r\n    public interpret(inputString: string): Query {\r\n        let match = grammar.match(inputString);\r\n        if (match.succeeded()) {\r\n            let s = semantics(match);\r\n            return s.tree();\r\n        } else {\r\n            throw new Error(\"Could not parse input string: \" + match.message);\r\n        }\r\n    }\r\n\r\n    public async evaluate(q: Query): Promise<Entity[]> {\r\n        if (q.via || this.data) {\r\n            let result = await Aeql.processSimpleQueryManually(q, this.data || {})\r\n            return result;\r\n        } else {\r\n            throw new Error(\"No data provided!\")\r\n        }\r\n    }\r\n\r\n    public async resolve(inputString: string): Promise<Entity[]> {\r\n        return await this.evaluate(this.interpret(inputString));\r\n    }\r\n\r\n    private static async processSimpleQueryManually(q: Query, data: Data) {\r\n        console.log(\"PROCESS SIMPLE QUERY MANUALLY\", { q })\r\n        // let collectionName: string = ''\r\n        let collection: { id: number, [key: string]: any }[] = [];\r\n\r\n        let firstCollectionId: Identifier = q.subject.getResources()[0]\r\n        let collectionName = capitalism.capitalize(\r\n            firstCollectionId.getValue()\r\n        )\r\n        if (data[collectionName] && data[collectionName].length) {\r\n            collection = data[collectionName].slice().map(a => ({ ...a }))\r\n        }\r\n        if (q.subject.getResources().length === 1) {\r\n            // okay, collection is fine!\r\n        } else {\r\n            q.subject.getResources().forEach((resourceId: Identifier) => {\r\n                if (resourceId !== firstCollectionId) {\r\n                    let resourceName = capitalism.capitalize(\r\n                        resourceId.getValue()\r\n                    )\r\n                    if (data[resourceName] && data[resourceName].length) {\r\n                        let resource = data[resourceName].slice().map(a => ({ ...a }))\r\n                        if (resource.length) {\r\n                            let allResourceAttrs = Object.keys(resource[0])\r\n                            let allModelAttrs = Object.keys(collection[0])\r\n                            let belongToKey = pluralize.singular(\r\n                                capitalism.downcase(collectionName)\r\n                            ) + \"_id\"\r\n                            let hasOneKey = pluralize.singular(\r\n                                capitalism.downcase(resourceName)\r\n                            ) + \"_id\"\r\n\r\n                            let belongingAttribute = allResourceAttrs.find(attr =>\r\n                                attr === belongToKey\r\n                            ) || ''\r\n                            let hasOneAttribute = allModelAttrs.find(attr =>\r\n                                attr === hasOneKey\r\n                            ) || ''\r\n\r\n                            if (belongingAttribute || hasOneAttribute) {\r\n                                collection = collection.flatMap(it => {\r\n                                    let matchingResource = {}\r\n                                    if (it.id) {\r\n                                        let res = resource.find(otherIt =>\r\n                                            belongingAttribute && otherIt[belongingAttribute] === it.id ||\r\n                                            hasOneAttribute && it[hasOneAttribute] == otherIt.id\r\n                                        )\r\n                                        if (res) {\r\n                                            matchingResource = Object.assign({}, res);\r\n                                            // @ts-ignore\r\n                                            delete matchingResource[belongingAttribute];\r\n                                            // @ts-ignore\r\n                                            delete matchingResource[hasOneAttribute];\r\n                                            let item = Object.assign({}, it)\r\n                                            return Object.assign(item, matchingResource)\r\n                                        }\r\n                                    }\r\n                                }).flat().filter(el => el !== undefined)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n        if (q.via) {\r\n            let result = await axios.get(q.via.getUrl(), {\r\n                baseURL: 'https://jsonplaceholder.typicode.com'\r\n            })\r\n            collection = result.data\r\n        }\r\n        if (q.order) {\r\n            let { order } = q\r\n            let orderName = order.getName()\r\n            collection = collection.sort((a, b) =>\r\n                a[orderName] > b[orderName] ? 1 : -1\r\n            )\r\n        }\r\n        if (q.conditions) {\r\n            let { conditions } = q\r\n            conditions.forEach((condition: Condition) => {\r\n                let attr = condition.getAttributeName()\r\n                let val = condition.getValue()\r\n                collection = collection.filter(it => {\r\n                    let matches = it[attr] == val\r\n                    console.log({ it, matches })\r\n                    return !!matches\r\n                })\r\n                console.log(\"APPLY CONDITION\", { condition, collection });\r\n            })\r\n        }\r\n        if (q.subject.isProjected()) {\r\n            collection = collection.map(it => {\r\n                let projection: { id: number, [key: string]: any } = {\r\n                    id: it.id\r\n                };\r\n                q.subject.getProjects().forEach(project => {\r\n                    let val: string = project.getValue();\r\n                    projection[val] = it[val];\r\n                })\r\n                console.log(\"PROJECTED\", { it, projection })\r\n                return projection;\r\n            })\r\n            // q.subject.getProjections()\r\n        }\r\n        return collection;\r\n    }\r\n}","import React from 'react';\r\nexport const HowTo: React.FC = () => <section className=\"Tips\" style={{ backgroundColor: '#e4eae9' }}>\r\n    <h3>how-to</h3>\r\n    <dl>\r\n        <dt>QUERY FORM</dt>\r\n        <dd>\r\n            the most basic form of a query begins\r\n            with <code>find</code> or <code>get</code>&nbsp;\r\n            followed by a model name\r\n          </dd>\r\n        <code>find humans</code>\r\n        <hr />\r\n        <dt>ORDERING</dt>\r\n        <dd>\r\n            you can order by attributes with <code>by</code>&nbsp;\r\n            followed by the attribute name\r\n          </dd>\r\n        <code>find employees by salary</code>\r\n        <hr />\r\n        <dt>SELECTION</dt>\r\n        <dd>pick rows using <code>with</code>, <code>where</code> or <code>whose</code> </dd>\r\n        <code>find humans whose age is 34</code>\r\n        <hr />\r\n        <dt>PROJECTION</dt>\r\n        <dd>pick columns using <code>find ... of</code></dd>\r\n        <code>find name, salary of employees where age is 47</code>\r\n        <hr/>\r\n        <dt>FETCHING</dt>\r\n        <dd>load data with <code>via</code> followed by the path</dd>\r\n        <code>find users whose name is Bret via /users</code>\r\n        <hr/>\r\n        <dt>JOINING</dt>\r\n        <dd>meld table data together with <code>find ... and ...`</code></dd>\r\n        <code>find employees and departments</code>\r\n    </dl>\r\n</section> ","import React, { Component, TextareaHTMLAttributes } from 'react';\r\nimport { Query } from '../../Aeql/Query';\r\nimport { Entity } from '../../Aeql/Aeql';\r\nimport { EntityTable } from './EntityTable';\r\nimport { AeqlQueryView } from './AeqlQueryView';\r\nimport { aeql } from '../Services/Database';\r\nimport { HowTo } from './HowTo';\r\nexport type QueryState = {\r\n  query: string,\r\n  result: string,\r\n  errors: string,\r\n  resultData: Entity[]\r\n}\r\n\r\nexport class AeqlQueryManager extends Component<{}, QueryState> {\r\n  state = {\r\n    query: '',\r\n    errors: '',\r\n    result: '',\r\n    resultData: []\r\n  };\r\n\r\n  private parseAeql = async (message: string) => {\r\n    let userInput: string = message;\r\n    if (userInput === '') {\r\n      this.setState({ query: '', result: '' })\r\n    } else {\r\n      let result = '';\r\n      let errors = undefined;\r\n      let resultData: Entity[] = [];\r\n      try {\r\n        let q: Query = aeql.interpret(userInput);\r\n        result = q.describe() //`match: ${q.describe()}\\n`\r\n        resultData = await aeql.evaluate(q)\r\n      } catch (e) {\r\n        errors = e.message\r\n      }\r\n      this.setState({\r\n        query: userInput,\r\n        result,\r\n        errors,\r\n        resultData,\r\n      });\r\n    }\r\n  };\r\n\r\n  public render() {\r\n    return <div>\r\n      <h3>query playground</h3>\r\n      <section className=\"TipsAndQuery\">\r\n        <HowTo />\r\n\r\n        <AeqlQueryView\r\n          initialQuery='find humans by name'\r\n          errors={this.state.errors}\r\n          parseAeql={this.parseAeql}\r\n          result={this.state.result}\r\n          resultData={this.state.resultData}\r\n        >\r\n        </AeqlQueryView>\r\n      </section>\r\n      <hr/>\r\n      <h4>Playground Data</h4>\r\n      <section className='SchemaAndData'>\r\n        <section className='Data'>\r\n          {aeql.data && Object.entries(aeql.data).map(\r\n            ([collection, models]) => <EntityTable\r\n              key={collection}\r\n              collectionName={collection}\r\n              models={models}\r\n            />\r\n          )}\r\n        </section>\r\n        <section className='Schema'>\r\n          <i>SCHEMA</i>\r\n          <h3>PERSONAE</h3>\r\n\r\n          {aeql.personae && Object.entries(aeql.personae).map(([name, persona]) => <section className='persona' key={name}>\r\n            <h5>Persona {name}</h5>\r\n            <div>\r\n              {Object.entries(persona).map(([attrName, type]) => <div key={attrName}>\r\n                {attrName} ({type})\r\n                </div>)}</div>\r\n          </section>)}\r\n          <h3>MODELS</h3>\r\n\r\n          {aeql.models && Object.entries(aeql.models).map(([name, model]) => <section className='models' key={name}>\r\n            <h5>Model {name}</h5>\r\n            <div>\r\n              {Object.entries(model).map(([attrName, type]) => <div key={attrName}>\r\n                {attrName} ({type})\r\n                </div>)}</div>\r\n          </section>)}\r\n\r\n        </section>\r\n      </section>\r\n    </div>;\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport { AeqlQueryManager } from './Components/AeqlQueryManager';\n\nconst AeqlText = () =>  {\n  return (<span className='Aeql-name' style={{ color: '#aeeaea', textShadow: '1.2px 1.2px #aeaeae', fontSize: '135%', fontWeight: 'bolder' }}>\n    aeql\n  </span>);\n}\n\nconst App: React.FC = () => {\n  return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>aeql-lang</h1>\n        </header>\n        <div className=\"App-wrapper\">\n          <main className=\"App-main\">\n            <section className='Welcome Card' style={{ backgroundColor: '#fafaf3' }}>\n              <h4>let's learn all about <AeqlText />!</h4>\n              <ul>\n                <li>naturalism</li>\n                <li>human values</li>\n                <li>categoreal design</li>\n              </ul>\n              <code>find humans who are awesome</code>\n            </section>\n\n            <section className='QueryManager Card'>\n              <AeqlQueryManager />\n            </section>\n          </main>\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n// import Trianglify from 'trianglify';\n// var pattern = Trianglify({\n//     width: window.innerWidth,\n//     height: window.innerHeight\n// });\n// document.body.appendChild(pattern.canvas())\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}