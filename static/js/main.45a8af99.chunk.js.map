{"version":3,"sources":["Aeql/Grammar.ts","Aeql/util/capitalism.ts","App/Components/EntityTable.tsx","App/Components/AeqlQueryView.tsx","Aeql/Query.ts","Aeql/Semantics.ts","App/Services/Database.ts","Aeql/Aeql.ts","App/Components/AeqlQueryManager.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["grammar","capitalism","s","charAt","toUpperCase","slice","EntityTable","props","models","length","react_default","a","createElement","className","Object","entries","map","_ref","_ref2","slicedToArray","attr","key","model","id","Fragment","_ref3","_ref4","value","AeqlQueryView","_React$Component","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","textarea","intervalID","lastValue","polling","React","createRef","inherits","createClass","_this2","window","setInterval","current","val","parseAeql","clearInterval","resultData","ref","defaultValue","initialQuery","errors","style","minWidth","textAlign","whiteSpace","split","error","backgroundColor","result","EntityTable_EntityTable","Component","isNode","contents","require","readFileSync","ohm","grammarFromScriptElement","g","Identifier","Subject","name","concat","describe","getValue","Condition","attributeName","attributeExpr","Ordering","HttpVehicle","url","Via","vehicle","Query","subject","order","conditions","via","console","log","condition","ordering","tree","_find","entity","elements","entityTree","queryElementsTree","orderTree","undefined","viaTree","conditionsTree","Array","forEach","element","Error","Entity","Criteria","_where","Conditions","attribute","is","attrTree","valTree","Order","_by","_via","Vehicle","_slash","URL","elems","sourceString","EmptyListOf","emptyListOf","NonemptyListOf","eFirst","_sep","eRest","toConsumableArray","nonemptyListOf","ident","fst","rst","semantics","createSemantics","addOperation","aeql","Aeql","config","personae","data","inputString","match","succeeded","message","_evaluate","asyncToGenerator","regenerator_default","mark","_callee","q","wrap","_context","prev","next","processSimpleQueryManually","sent","abrupt","stop","_x","apply","arguments","_resolve","_callee2","_context2","evaluate","interpret","_x2","_processSimpleQueryManually","_callee3","collectionName","collection","orderName","_context3","getName","axios","get","getUrl","baseURL","sort","b","getAttributeName","filter","it","matches","_x3","_x4","Human","age","Employee","empId","salary","department","Humans","Employees","AeqlQueryManager","_Component","_getPrototypeOf2","_len","args","_key","state","query","userInput","setState","t0","AeqlQueryView_AeqlQueryView","_ref5","persona","_ref6","_ref7","attrName","type","AeqlText","color","textShadow","fontSize","fontWeight","App","App_AeqlText","AeqlQueryManager_AeqlQueryManager","Boolean","location","hostname","ReactDOM","render","src_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45a8af99.chunk.js","sourcesContent":["import ohm, { Grammar } from 'ohm-js';\r\nimport isNode from 'detect-node';\r\n\r\nlet grammar;\r\nif (isNode) {\r\n  var fs = require('fs');\r\n  var contents = fs.readFileSync('./src/Aeql/Aeql.ohm');\r\n  grammar = ohm.grammar(contents);\r\n} else {\r\n  grammar = ohm.grammarFromScriptElement();\r\n}\r\nlet g: Grammar = grammar;\r\n\r\nexport default g;","const capitalize: (s: string) => string = (s: string) =>\r\n    s.charAt(0).toUpperCase() + s.slice(1)\r\n\r\nexport default {\r\n    capitalize\r\n}","import React from 'react';\r\nimport capitalism from \"../../Aeql/util/capitalism\";\r\nimport { Entity } from \"../../Aeql/Aeql\";\r\nimport './EntityTable.scss';\r\n\r\nexport const EntityTable: React.FC<{ collectionName?: string, models: Entity[] }> = (props) => {\r\n  let { models } = props;\r\n  if (!models.length) {\r\n    return <p>Nothing.</p>\r\n  }\r\n  return <section className='EntityTable'> \r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          {Object.entries(models[0]).map(([attr, val]) => <th key={attr}>\r\n            {capitalism.capitalize(attr)}\r\n          </th>)}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {models.map(model => <tr key={model.id}><>\r\n          {Object.entries(model).map(\r\n            ([attr, value]) => <td key={attr}>\r\n              {!(value instanceof Object) ? value : \"[object]\"}\r\n            </td>\r\n          )}\r\n        </>\r\n        </tr>)}\r\n      </tbody>\r\n    </table>\r\n  </section>\r\n}","import React from 'react';\r\nimport { EntityTable } from './EntityTable';\r\nimport { Entity } from '../../Aeql/Aeql';\r\n\r\nexport interface QueryViewProps {\r\n  initialQuery?: string;\r\n errors: string,\r\n resultData: Entity[],\r\n parseAeql: Function\r\n result: string;\r\n}\r\n\r\n\r\nexport class AeqlQueryView extends React.Component<QueryViewProps> {\r\n  textarea: React.RefObject<any>;\r\n  intervalID: number = 0;\r\n  lastValue: string = 'nothing';\r\n  polling: boolean = false;\r\n  constructor(props: QueryViewProps) {\r\n    super(props);\r\n    this.textarea = React.createRef();\r\n  }\r\n  componentDidMount() {\r\n      this.intervalID = window.setInterval(() => {\r\n        if (this.lastValue && this.lastValue != this.textarea.current.value && !this.polling) {\r\n          let val = this.textarea.current.value;\r\n          this.props.parseAeql(val);\r\n          this.lastValue = val;\r\n        }\r\n      }, 150);\r\n  }\r\n  componentWillUnmount() {\r\n      clearInterval(this.intervalID);\r\n  }\r\n  public render() {\r\n    let { resultData } = this.props;\r\n    return <>\r\n      <label>\r\n        ask aeql anything:\r\n        &nbsp;\r\n      <textarea id='query' ref={this.textarea} defaultValue={this.props.initialQuery || 'find humans'} />\r\n      </label>\r\n      {this.props.errors && <section style={{ minWidth: '100%'}}>\r\n      <div style={{textAlign: 'justify', whiteSpace: 'pre-wrap'}}>{this.props.errors.split(\"\\n\").map(error => <p key={error}><code>{error}</code></p>)}</div>\r\n        </section>}\r\n      <section className='Result' style={{backgroundColor: '#eaeaea'}}>\r\n        {/* {this.props.children} */}\r\n        <h3>{this.props.result}</h3>\r\n        {resultData instanceof Object && <EntityTable models={resultData} />}\r\n      </section>\r\n    </>;\r\n  }\r\n}\r\n","import { Node } from 'ohm-js';\r\n\r\nexport interface QueryElement {\r\n    describe(): string\r\n}\r\n\r\nexport class Identifier implements QueryElement {\r\n    constructor(private value: string) {}\r\n    describe() {\r\n        return this.value;\r\n    }\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n}\r\n\r\nexport class Subject implements QueryElement {\r\n    constructor(private name: Identifier) {}\r\n    describe() {\r\n        return `${this.name.describe()}`;\r\n    }\r\n    getName() { \r\n        return this.name.getValue();\r\n    }\r\n}\r\n\r\nexport class Condition implements QueryElement {\r\n    getAttributeName() {\r\n        return this.attributeName.getValue();\r\n    }\r\n    getValue() {\r\n        return this.attributeExpr.getValue();\r\n    }\r\n    constructor(private attributeName: Identifier, private attributeExpr: any) {\r\n    }\r\n\r\n    describe() {\r\n        return `${this.attributeName.describe()} is ${this.attributeExpr.describe()}`\r\n    }\r\n}\r\n\r\nexport class Ordering implements QueryElement {\r\n    constructor(private name: Identifier) {}\r\n    describe() {\r\n        return `${this.name.describe()}`\r\n    }\r\n    getName() {\r\n        return this.name.getValue();\r\n    }\r\n}\r\n\r\nexport class HttpVehicle {\r\n    constructor(public url: string) {}\r\n\r\n}\r\n\r\nexport class Via implements QueryElement {\r\n    constructor(private vehicle: HttpVehicle) {} \r\n    describe() {\r\n        return `${this.vehicle.url}`\r\n    }\r\n\r\n    getUrl(): any {\r\n        return this.vehicle.url\r\n    }\r\n}\r\n\r\nexport class Query {\r\n    constructor(\r\n        public subject: Subject,\r\n        public order?: Ordering,\r\n        public conditions?: Condition[],\r\n        public via?: Via\r\n    ) {}\r\n\r\n    describe() {\r\n        console.log(\"conditions\", this.conditions)\r\n        let conditions = '';\r\n        if (this.conditions && this.conditions.length) {\r\n            conditions = `where ${this.conditions.map(condition => condition.describe())}`;\r\n        } \r\n        let ordering = '';\r\n        if (this.order) {\r\n            ordering = `by ${this.order.describe()}`\r\n        }\r\n        let via = '';\r\n        if (this.via) {\r\n            via = `via ${this.via.describe()}`\r\n        }\r\n        return `Find ${this.subject.describe()} ${ordering} ${conditions} ${via}`;\r\n    }\r\n}\r\n","import grammar from './Grammar';\r\nimport { Query, Subject, Condition, Ordering, Identifier, Via, HttpVehicle } from './Query';\r\nimport { Node } from 'ohm-js';\r\n\r\nconst tree = {\r\n  Query: (_find: Node, entity: Node, elements: Node) => {\r\n    let entityTree = entity.tree()\r\n    let queryElementsTree = elements.tree()\r\n    let orderTree: Ordering | undefined = undefined;\r\n    let viaTree: Via | undefined = undefined;\r\n    let conditionsTree: Condition[] = []\r\n    if (queryElementsTree instanceof Array) {\r\n      queryElementsTree.forEach(element => {\r\n        if (element instanceof Ordering) {\r\n          if (orderTree) { throw new Error(\"Can't have multiple orderings\") }\r\n          orderTree = element;\r\n        } else if (element instanceof Via) {\r\n          if (viaTree) { throw new Error(\"Can't have multiple vehicles (vias)\") }\r\n          viaTree = element;\r\n        } else if (element instanceof Array && element.length && \r\n            element[0] instanceof Condition) { \r\n              // presume all conditions?\r\n              conditionsTree = element;\r\n        }\r\n      })\r\n    }\r\n    let q = new Query(entityTree, orderTree, conditionsTree, viaTree)\r\n    return q\r\n  },\r\n\r\n  Entity: (id: Node) => new Subject(id.tree()),\r\n\r\n  Criteria: (_where: Node, conditions: Node) => {\r\n    console.log(\"CRITERIA\", conditions.tree())\r\n    return conditions.tree();\r\n  },\r\n\r\n  Conditions: (conditions: Node) => {\r\n    // let theConditions = conditions.children.map(condition => condition.tree())\r\n    // console.log(\"CONDITIONS\", { theConditions })\r\n    return conditions.tree();\r\n  },\r\n\r\n  Condition: (attribute: Node, is: Node, value: Node) => {\r\n    console.log(\"CONDITION\", { attrTree: attribute.tree(), valTree: value.tree() })\r\n    return new Condition(attribute.tree(), value.tree());\r\n  },\r\n  \r\n  Order: (_by: Node, order: Node) => {\r\n    let orderTree = order.tree()\r\n    let ordering = new Ordering(orderTree)\r\n    return ordering;\r\n  },\r\n\r\n  Via: (_via: Node, vehicle: Node) => {\r\n    let theVia = new Via(vehicle.tree());\r\n    return theVia;\r\n  },\r\n\r\n  Vehicle: (_slash: Node, url: Node) => {\r\n    let theVehicle: HttpVehicle = new HttpVehicle('/' + url.tree());\r\n    return theVehicle;\r\n  },\r\n\r\n  URL: (elems: Node) => {\r\n    return elems.sourceString\r\n  },\r\n\r\n  EmptyListOf: (): Node[] => [],\r\n  emptyListOf: (): Node[] => [],\r\n\r\n  NonemptyListOf: (eFirst: Node, _sep: any, eRest: Node) =>\r\n    [eFirst.tree(), ...eRest.tree()],\r\n\r\n  nonemptyListOf: (eFirst: Node, _sep: any, eRest: Node) =>\r\n    [eFirst.tree(), ...eRest.tree()],\r\n\r\n  ident: (fst: Node, rst: Node) =>\r\n    new Identifier(fst.sourceString + rst.sourceString),\r\n};\r\n\r\nconst semantics = grammar.createSemantics();\r\nsemantics.addOperation('tree', tree);\r\n\r\nexport default semantics;","import Aeql from \"../../Aeql\";\r\n\r\nexport let aeql = new Aeql({\r\n  personae: {\r\n    Human: {\r\n      name: 'string',\r\n      age: 'int',\r\n    },\r\n    Employee: {\r\n      name: 'string',\r\n      empId: 'int',\r\n      age: 'int',\r\n      salary: 'int',\r\n      department: 'Department',\r\n    }\r\n  },\r\n  data: {\r\n    Humans: [\r\n      { id: 1, name: 'Zeta',   age: 59 },\r\n      { id: 2, name: 'Bob',    age: 23 },\r\n      { id: 3, name: 'Jim',    age: 19 },\r\n      { id: 4, name: 'Abel',   age: 24 },\r\n      { id: 5, name: 'Sawyer', age: 34 },\r\n    ],\r\n    Employees: [\r\n      { id: 1, name: 'Rhonda', empId: 1002, age: 47, salary: 14000 },\r\n      { id: 2, name: 'Barbara-Anniston', empId: 1034, age: 23, salary: 18000 },\r\n      { id: 3, name: 'Carol Andrews', empId: 1045, age: 35, salary: 10000 },\r\n      { id: 4, name: 'Sandra Amberg', empId: 5044, age: 42, salary: 18500 },\r\n      { id: 5, name: 'Andra Saunders', empId: 231, age: 23, salary: 8000 },\r\n      { id: 6, name: 'Exandra Calabanza', empId: 1, age: 68, salary: 12000 },\r\n    ]\r\n  }\r\n});","import { Query, Condition } from \"./Query\";\r\nimport grammar from './Grammar';\r\nimport semantics from \"./Semantics\";\r\nimport capitalism from \"./util/capitalism\";\r\nimport axios from 'axios';\r\n\r\n\r\ntype AttributeType = 'Text' | 'Int' | string\r\nexport type Persona = { [attribute: string]: AttributeType }\r\nexport type Personae = { [model: string]: Persona }\r\n\r\nexport type Entity = { id: number, [attr: string]: any }\r\nexport type Data = {\r\n    [collectionName: string]: Entity[]\r\n}\r\ninterface AeqlConfig {\r\n    personae: Personae\r\n    data?: Data\r\n}\r\nexport class Aeql {\r\n\r\n    public personae: Personae\r\n    public data?: Data\r\n\r\n    constructor(public config: AeqlConfig) {\r\n        this.personae = config.personae;\r\n        if (config.data) {\r\n            this.data = config.data;\r\n        }\r\n    }\r\n\r\n    public interpret(inputString: string): Query {\r\n        let match = grammar.match(inputString);\r\n        if (match.succeeded()) {\r\n            let s = semantics(match);\r\n            return s.tree();\r\n        } else {\r\n            throw new Error(\"Could not parse input string: \" + match.message);\r\n        }\r\n    }\r\n\r\n    public async evaluate(q: Query): Promise<Entity[]> {\r\n        if (q.via || this.data) {\r\n            let result = await Aeql.processSimpleQueryManually(q, this.data || {})\r\n            return result;\r\n        } else {\r\n            throw new Error(\"No data provided!\")\r\n        }\r\n    }\r\n\r\n    public async resolve(inputString: string): Promise<Entity[]> {\r\n        return await this.evaluate(this.interpret(inputString));\r\n    }\r\n\r\n    private static async processSimpleQueryManually(q: Query, data: Data) {\r\n        console.log(\"PROCESS SIMPLE QUERY MANUALLY\", { q })\r\n        let collectionName: string = capitalism.capitalize(\r\n            q.subject.getName()\r\n        )\r\n        let collection: Entity[] = [];\r\n        if (q.via) {\r\n            let result = await axios.get(q.via.getUrl(), {\r\n                baseURL: 'https://jsonplaceholder.typicode.com'\r\n            })\r\n            collection = result.data\r\n        } else if (data[collectionName] && data[collectionName].length) {\r\n            collection = data[collectionName].slice();\r\n        }\r\n        if (q.order) {\r\n            let { order } = q\r\n            let orderName = order.getName()\r\n            collection = collection.sort((a, b) =>\r\n                a[orderName] > b[orderName] ? 1 : -1\r\n            )\r\n        }\r\n        if (q.conditions) {\r\n            let { conditions } = q\r\n            conditions.forEach((condition: Condition) => {\r\n                let attr = condition.getAttributeName()\r\n                let val = condition.getValue()\r\n                collection = collection.filter(it => {\r\n                    let matches = it[attr] == val\r\n                    console.log({ it, matches })\r\n                    return !!matches\r\n                })\r\n                console.log(\"APPLY CONDITION\", { condition, collection });\r\n            })\r\n        }\r\n        return collection;\r\n    }\r\n}","import React, { Component, TextareaHTMLAttributes } from 'react';\r\nimport { Query } from '../../Aeql/Query';\r\nimport { Entity } from '../../Aeql/Aeql';\r\nimport { EntityTable } from './EntityTable';\r\nimport { AeqlQueryView } from './AeqlQueryView';\r\nimport { aeql } from '../Services/Database';\r\nexport type QueryState = {\r\n  query: string,\r\n  result: string,\r\n  errors: string,\r\n  resultData: Entity[]\r\n}\r\n\r\nexport class AeqlQueryManager extends Component<{}, QueryState> {\r\n  state = {\r\n    query: '',\r\n    errors: '',\r\n    result: '',\r\n    resultData: []\r\n  };\r\n\r\n  private parseAeql = async (message: string) => {\r\n    let userInput: string = message;\r\n    if (userInput === '') {\r\n      this.setState({ query: '', result: '' })\r\n    } else {\r\n      let result = '';\r\n      let errors = undefined;\r\n      let resultData: Entity[] = [];\r\n      try {\r\n        let q: Query = aeql.interpret(userInput);\r\n        result = q.describe() //`match: ${q.describe()}\\n`\r\n        resultData = await aeql.evaluate(q)\r\n      } catch (e) {\r\n        errors = e.message\r\n      }\r\n      this.setState({\r\n        query: userInput,\r\n        result,\r\n        errors,\r\n        resultData,\r\n      });\r\n    }\r\n  };\r\n\r\n  public render() {\r\n    return <>\r\n      <h3>query playground</h3>\r\n      <p>answer all your questions here!</p>\r\n      <section style={{ backgroundColor: '#e4eae9' }}>\r\n        <h3>TIPS</h3>\r\n        <dl>\r\n          <dt>QUERY FORM</dt>\r\n          <dd>the basic form of a query begins with <code>find...</code> or <code>get [model-or-persona-name]</code></dd>\r\n\r\n          <dt>ORDERING</dt>\r\n          <dd>you can order by attributes with <code>by [attribute name]</code></dd>\r\n\r\n          <dt>SELECTION</dt>\r\n          <dd>pick columns like <code>find humans whose age is 100</code></dd>\r\n\r\n          <dt>FETCHING</dt>\r\n          <dd>load data with <code>via https(/users)</code></dd>\r\n        </dl>\r\n      </section>\r\n      <section>\r\n        <AeqlQueryView\r\n          initialQuery='find users via /users'\r\n          errors={this.state.errors}\r\n          parseAeql={this.parseAeql}\r\n          result={this.state.result}\r\n          resultData={this.state.resultData}\r\n        >\r\n        </AeqlQueryView>\r\n      </section>\r\n      <section style={{backgroundColor: '#eaeaf3'}}>\r\n        <b>DATA</b>\r\n        {aeql.data && Object.entries(aeql.data).map(\r\n          ([collection, models]) => <EntityTable\r\n            key={collection}\r\n            collectionName={collection}\r\n            models={models}\r\n          />\r\n        )}\r\n      </section>\r\n      <section className='SchemaAndDataSet'>\r\n        <b>SCHEMA</b>\r\n        {Object.entries(aeql.personae).map(([name, persona]) => <section className='persona' key={name}>\r\n          <h3>Persona {name}</h3>\r\n          <ul>\r\n            {Object.entries(persona).map(([attrName, type]) => <div key={attrName}>\r\n              {attrName} ({type})\r\n                </div>)}</ul>\r\n        </section>)}\r\n      </section>\r\n    </>;\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport { AeqlQueryManager } from './Components/AeqlQueryManager';\nconst AeqlText = () =>  {\n  return (<span className='Aeql-name' style={{ color: '#aeeaea', textShadow: '1.2px 1.2px #aeaeae', fontSize: '135%', fontWeight: 'bolder' }}>\n    aeql\n  </span>);\n}\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        hello aeql\n      </header>\n      <main className=\"App-main\">\n        <section className='Welcome' style={{ backgroundColor: '#fafaf3'}}>\n          <h1>let's learn all about <AeqlText />!</h1>\n          <p><AeqlText/>: it's a tiny query language</p>\n          <pre>find humans by name</pre>\n          {/* <pre>get count(employees), sum(employees.salary) by department</pre> */}\n          {/* <pre>find all dinosaurs by average(fossils.date)</pre> */}\n          <p>\n            <AeqlText/> emphasizes human values, encouraging the description\n            of personae in the system\n          </p>\n          {/* <pre>find employees by name whose job is accountant</pre> */}\n        </section>\n\n        <section className='QueryManager'>\n          <AeqlQueryManager />\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}